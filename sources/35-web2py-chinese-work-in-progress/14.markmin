
## 其他方法

### 升级
``upgrades``:inxx

在“site”页面的管理界面中有一个“upgrade now”按钮。以防这不可行，或不能正常工
作（例如，因为一个文件锁定问题），手动升级web2py是很容易的。

-------
只要解压缩最新版本的web2py覆盖旧的安装。
-------

这将更新所有的库和应用程序： **admin**, **examples**, **welcome**。 它还将创建一个新的空文件“NEWINSTALL”。

当重新启动时，web2py将删除空文件和打包welcome应用程序到“welcome.w2p”，其
将作为新的基本构建应用程序。


web2py不会升级在其他的现有应用程序中的任何文件。

### 如何以二进制文件发布你的应用程序

用web2py二进制版本捆绑你的的应用程序并一起发布是可能的，该许可证允许这，
只要在你的应用程序的许可证中，你明确正在用web2py绑定并且添加一个到 ``web2py.com``的链接。 

这里，我们解释如何为Windows实现：

- 像平常一样创建你的应用程序
- 使用 **admin**，字节码编译你的应用程序（点击一下）
- 使用 **admin**，包装你的编译过的应用程序（再点击一下）
- 创建文件夹“myapp”
- 下载web2py的windows二进制发行版
- 在文件夹“myapp”中解压并启动它（双击）
- 使用 **admin** （管理)上传先前包装的和编译的名为“init”的应用程序（单击）
- 创建文件“myapp/start.bat”包含“cd web2py; web2py.exe”
- 创建文件“myapp/license”，它包含一个你的应用程序的许可证，并确保它表述
为：它正在被“用来自web2py.com未经修改的web2py副本发布”
- 压缩myapp文件夹为文件“myapp.zip”
- 发布和/或销售“myapp.zip”

当用户解压“myapp.zip”和单击“run”时，他们将看到你的应用程序而不是
“welcome”应用程序。在用户侧没有要求，即便是Python的预安装。
对于Mac二进制发布过程是相同的，但不需要“bat”文件。

### 建立一个最低限度的web2py

有时我们需要在很小内存占用的服务器上部署web2py，这种情况下，我们想要拆分
web2py直到它的最低限度。

一种容易的方式就是照着下面去做：
- 在一个生产机器上，从源代码安装所有的web2py
- 从里面主要的web2py文件夹运行
``
python scripts/make_min_web2py.py /path/to/minweb2py
``
- 现在在"/path/to/minweb2py/applications"下拷贝你想部署的应用程序；
- 部署“/ path/to/minweb2py”到小足迹服务器

脚本“make_min_web2py.py”构建一个最小web2py版本，其不包含：
- admin（管理）
- examples（实例）
- welcome（欢迎）
- scripts（脚本）
- 很少使用的contrib模块（rarely used contrib modules）

它确实不包括“welcome”应用程序，其包括一个简单的文件允许测试部署。寻找该脚
本，在它顶部，它包含了一个详细的列表，其包含有那些应该有的和那些可以忽略不管的。
你能容易的修改它和按照你的需要裁剪。

### 取出一个外部URL
``fetch``:inxx

Python包括用来抓取url的``urllib``库：
``
import urllib
page = urllib.urlopen('http://www.web2py.com').read()
``:code

``API``:inxx

这常常是很好的，但``urllib``模块在Google App Engine上不工作，Google提供了一个不同的API，其用于下载URL，
它只能在GAE上工作。
为了让你的代码便于移植，web2py包括一个在GAE上工作的``fetch`` 函数，和其他的
Python安装一样：
 
``
from google.tools import fetch
page = fetch('http://www.web2py.com')
``:code

### 漂亮的日期
``prettydate``:inxx

用来表示日期不为“2009-7-25 14:34:56”，而是“one year ago”，它常常是有用的。
web2py对此提供了一个应用函数：
``
import datetime
d = datetime.datetime(2009,7,25,14,34,56)
from gluon.tools import prettydate
pretty_d = prettydate(d,T)
``:code

第二个参数（T）必须被通过，以便允许国际化的输出。

### 地理编码
``geocode``:inxx

如果你需要转换一个地址（例如：“243 S Wabash Ave, Chicago, IL, USA”）为地理坐
标（经度和纬度），web2py提供了一个函数来做到。
``
from gluon.tools import geocode
address = '243 S Wabash Ave, Chicago, IL, USA'
(latitude, longitude) = geocode(address)
``:code

这个函数 ``geocode`` （地理编码）要求一个网络连接和它连接用于这个地理编码的
Google地理编码服务。
在失败的情况下，这个函数返回 ``(0,0)`` 。注意：Google地理编码服务覆盖了这些请求，
所以你应该检查他们的服务协议。``geocode`` （地理编码）函数建立在``fetch`` 函数顶部并且这样它在GAE上工作。
### 分页
``pagination``:inxx

在分页的情况下，这个方法是一个尽量减少数据库访问的有用技巧，例如，当你需要
显示数据库中的一个行的列表，但你想要在多个页面分发行时。

首先，创建一个**primes** 的应用程序，它存储了在一个数据库中的前1000个素数。

这儿是 ``db.py``模型：
``
db = DAL('sqlite://primes.db')
db.define_table('prime',Field('value','integer'))
def isprime(p):
    for i in range(2,p):
        if p%i==0: return False
    return True
if len(db().select(db.prime.id))==0:
   p=2
   for i in range(1000):
       while not isprime(p): p+=1
       db.prime.insert(value=p)
       p+=1
``:code

现在在“default.py”控制器中创建一个动作 ``list_items`` ，它读起来像这样：
``
def list_items():
    if len(request.args): page=int(request.args[0])
    else: page=0
    items_per_page=20
    limitby=(page*items_per_page,(page+1)*items_per_page+1)
    rows=db().select(db.prime.ALL,limitby=limitby)
    return dict(rows=rows,page=page,items_per_page=items_per_page)
``:code

注意：这个代码选择了一个比需要更多的条目，20+1，额外的元素告诉视图是否存在
下一个页面。

这儿是“default/list_items.html”视图：
``
{{extend 'layout.html'}}

{{for i,row in enumerate(rows):}}
{{if i==items_per_page: break}}
{{=row.value}}<br />
{{pass}}

{{if page:}}
<a href="{{=URL(args=[page-1])}}">previous</a>
{{pass}}

{{if len(rows)>items_per_page:}}
<a href="{{=URL(args=[page+1])}}">next</a>
{{pass}}
``:code

在这种方式中，我们已经用就每个动作单个选择获得了分页，并且那个选择只选择比
我们需要的多一行。

### httpserver.log和日志文件格式
``httpserver.log``:inxx

Web2py网页服务器日志所有的请求到一个文件叫：
``
httpserver.log
``:code

在web2py根目录下，可以通过web2py命令行选项指定另一个可替换文件名和位置。
每次发出请求时，新的条目追加到该文件的尾部。每一行看起来像这样：
``
127.0.0.1, 2008-01-12 10:41:20, GET, /admin/default/site, HTTP/1.1, 200, 0.270000
``:code

其格式为：
``
ip, timestamp, method, path, protocol, status, time_taken
``:code

此处：
- ip是发出请求用户的IP地址
- 时间戳是要求的日期和时间，用ISO8601 格式表示，YYYYMM-DDT HH：
MM：SS
- 方法是GET或POST
- path是用户请求的路径
- protocol（协议）是HTTP协议，其用于发送给用户，通常是HTTP/1.1
- tatus是HTTP状态编码中``status``:cite 的一个
- time_taken（所用时间）是服务器获取请求进程花费的时间，以秒为单位，不包
括上传/下载时间。

在应用库``appliances``:cite，你会发现一个用于日志分析的应用。当使用mod_wsgi时，默认情况下该日志不可用，因为它和Apache日志相同。

### 用虚拟数据填充数据库

出于测试目的，它能很方便的用虚拟数据填充数据库表。 web2py包括一个经训练过
的贝叶斯分类器，它生成虚拟的但可读的用于此目的文本。
这里是最简单使用它的方式：
``
from gluon.contrib.populate import populate
populate(db.mytable,100)
``:code

它将插入100的伪记录入db.mytable。它将尝试智能地做去完成，通过使用字符串字段
生成简短的文本、用文本字段生成更长文本、整数、双精度、日期、日期时间、时间、布尔等相应字段。
它会尝试遵守验证器提出的要求，因为字段包含单词 “name”，它会尝试生成假名称，
对于参考字段，它将会产生有效的参考。

如果你有两个表（Ａ和Ｂ）且Ｂ参考Ａ，确保按照首先填入Ａ和Ｂ次之的原则。
因为在一个事务处理中填入已经完成，不要试图马上填入太多的记录，特别是如果涉
及到引用。相反，一次填入100、提交、循环。
``
for i in range(10):
    populate(db.mytable,100)
    db.commit()
``:code

你可以使用贝叶斯分类器去学习一些文本和生成假文本，它听起来相似但应该是没有
意义的：
``
from gluon.contrib.populate import Learner, IUP
ell=Learner()
ell.learn('some very long input text ...')
print ell.generate(1000,prefix=None)
``:code

### 接受信用卡付款

``Google Wallet``:inxx ``Paypal``:inxx ``Stripe.com``:inxx
``Authorize.net``:inxx ``DowCommerce``:inxx

有多种方式接受信用卡在线付款。Web2py提供专门的API用于最流行的一些和部分：

- Google钱包``googlewallet``:cite
- 贝宝 ``paypal``cite
- Stripe.com ``stripe``:cite
- Authorize.net ``authorizenet``:cite
- DowCommerece ``dowcommerce``:cite


上述前两个机制委托验证受款人过程到外部服务。
虽然这是最好的安全解决方案（您的应用程序不处理任何信用卡信息），它使过程繁
琐（用户必须登录两次，例如，一次与你的应用程序，和一次与谷歌）并不允许你的应用程序用一个自动化的方式来处理经常性支付。
有很多次，当你需要更多的控制以及你要生成自己的信用卡信息的报名表，而不是处
理器编程要求将资金从信用卡转到您的帐户。
出于这个原因，web2py 提供了集成的开箱即用的Stripe，Authorize.net（模块是由
John Conde开发并略有修改）和DowCommerce。
Stripe是最简单的操作，也是最便宜用于低交易量的方式（他们不会收取任何固定费
用，但每笔交易的成本大约3%）。 Authorize.net更好使用于高容量交易（每年有一个固定
的成本，加上较低的交易费用）。
记住，在Stripe和Authorize.net的情况下，你的程序将接受信用卡信息。
你不必存储这些信息并且我们建议你不要存储，因为涉及到法律要求（检查Visa或
Mastercard），当你可能想要存储经常性收支或复制亚马逊的点击支付按钮的信息，却又很多次。

#### Google 钱包

使用Google 钱包（一级）的最简单的方式包括嵌入一个按钮到你的网页，当点击时，
你的访问者被重定向到一个由谷歌提供的支付页面。
首先，你需要在URL上注册一个谷歌商业账户：

``
https://checkout.google.com/sell
``

你需要提供你的银行信息给Google，Google 将分配给你一个``merchant_id`` 和``merchant_key`` (不要混淆了他们，让他们处于保密状态)。

那么，你仅需要在你的页面上创建下面的编码：

``
{{from gluon.contrib.google_wallet import button}}
{{=button(merchant_id="123456789012345",
           products=[dict(name="shoes",
                          quantity=1,
                          price=23.5,
                          currency='USD',
                          description="running shoes black")])}}
``

当访问者点击这个按钮时，访问者会被重定向到谷歌网页，在那儿他/她可以为该项
目支付。
这里，产品是一个产品列表，每个产品是参数的一本字典，一本你想通过它描述你的
项目（名称、数量、价格、货币、说明和其他可选项，你可以在谷歌钱包文档找到这些）。
如果你选择使用这种机制，你也许希望通过这个编程的基于你的库存和游客购物图的
按钮生成这些值。
谷歌方面将处理所有的税金和运费信息，会计信息亦相同。
默认情况下，你的应用程序不会被告知，该交易已经完成，因此，你必须访问你的
Google Merchant网站，以便知道，哪款产品已购买和支付，以及哪款产品你需要运送到你
的买家。谷歌也将发送给你一封包含这些信息电子邮件。
如果你想要一个更紧密的集成，你必须使用2级通知API。在那种情况下，你可以传
递更多的信息到谷歌并且谷歌将调用你的API告知有关购买情况。
这可以让你保持在您的应用程序的账户信息，但它要求你公开Web服务，给服务可
以与谷歌钱包对话。
这是一个相当困难的问题，但这样的API已经实现，并且它可以作为插件形式：

``
http://web2py.com/plugins/static/web2py.plugin.google_checkout.w2p
``

你可以找到插件文档和该插件本身。

#### Paypal

这儿不描述Paypal集成，但是你可以找到更多关于它的信息，在如下资源：

``
http://www.web2pyslices.com/main/slices/take_slice/9
``

#### Stripe.com

对于接受信用卡付款，这可能是最简单的和灵活的方式中的一种。
你需要在Stripe.com上注册而且那是非常容易的过程，实际上Stripe会分配给你一个
API密钥甚至在你创建的任何凭证之前去尝试。
一旦你有了API密钥，你可以用下面的代码接受信用卡：

``
from gluon.contrib.stripe import Stripe
stripe = Stripe(api_key)
d = stripe.charge(amount=100,
	      currency='usd',
              card_number='4242424242424242',
              card_exp_month='5',
              card_exp_year='2012',
              card_cvc_check='123',
              description='the usual black shoes')
if d.get('paid',False):
    # payment accepted
elif:
    # error is in d.get('error','unknown')
``

这个响应 ``d``是一本字典，一本你可以暴露你自己的字典。在本例中使用的卡号是一
个沙箱，并且它总是成功的。每一笔交易都与存储``d['id']``中的交易id有关联。

Stripe也允许你在往后的时间来验证一笔交易：

``
d = Stripe(key).check(d['id'])
``

和退款交易：

``
r = Stripe(key).refund(d['id'])
if r.get('refunded',False):
    # refund was successful
elif:
    # error is in d.get('error','unkown')
``

Stripe很容易在你的应用程序中保持这账单。
你的应用程序与Stripe的所有通信都是基于RESTful web服务上的。实际上Stripe公开
了更多的服务并提供了一个更大的Python API集。
你可以在他们的web网站上读到更多信息。

#### Authorize.Net

另一接受信用卡的简单方式就是使用Authorize.net。像平常一样，你需要注册并且你
将获取一个``login``和交易的密钥（``transkey``）,一旦你有了它们，它工作基理非常像Stripe：


``
from gluon.contrib.AuthorizeNet import process
if process(creditcard='4427802641004797',
           expiration="122012,
           total=100.0,cvv='123',tax=None,invoice=None,
           login='cnpdev4289', transkey='SR2P8g4jdEn7vFLQ',testmode=True):
   # payment was processed
else:
   # payment was rejected
``:code

如果你有一个有效的Authorize.Net帐户，你应该用有关您帐户的内容更换沙箱中的``login``和``transkey``，设置``testmode=False``，以便它在真正的平台，而不是沙箱中运行，并使用访问者提供的信用卡信息。


如果 ``process`` ）返回为 ``True``，访问者信用卡账户中的钱就转到你的
Authorize.Net账户。``invoice``（发票）只是一个字符串，一串你可以设置和将被Authorize.Net存储的字符串，有了这次交易便于你可以调和在你的应用程序中的数据信息。
这儿是一个更复杂的工作流实例，有更多的变量被公开：
 
``
from gluon.contrib.AuthorizeNet import AIM
payment = AIM(login='cnpdev4289',
              transkey='SR2P8g4jdEn7vFLQ',
              testmod=True)
payment.setTransaction(creditcard, expiration, total, cvv, tax, invoice)
payment.setParameter('x_duplicate_window', 180) # three minutes duplicate windows
payment.setParameter('x_cust_id', '1324')       # customer ID
payment.setParameter('x_first_name', 'Agent')
payment.setParameter('x_last_name', 'Smith')
payment.setParameter('x_company', 'Test Company')
payment.setParameter('x_address', '1234 Main Street')
payment.setParameter('x_city', 'Townsville')
payment.setParameter('x_state', 'NJ')
payment.setParameter('x_zip', '12345')
payment.setParameter('x_country', 'US')
payment.setParameter('x_phone', '800-555-1234')
payment.setParameter('x_description', 'Test Transaction')
payment.setParameter('x_customer_ip', socket.gethostbyname(socket.gethostname()))
payment.setParameter('x_email', 'you@example.com')
payment.setParameter('x_email_customer', False)

payment.process()
if payment.isApproved():
    print 'Response Code: ', payment.response.ResponseCode
    print 'Response Text: ', payment.response.ResponseText
    print 'Response: ', payment.getResultResponseFull()
    print 'Transaction ID: ', payment.response.TransactionID
    print 'CVV Result: ', payment.response.CVVResponse
    print 'Approval Code: ', payment.response.AuthCode
    print 'AVS Result: ', payment.response.AVSResponse
elif payment.isDeclined():
    print 'Your credit card was declined by your bank'
elif payment.isError():
    print 'It did not work'
print 'approved',payment.isApproved()
print 'declined',payment.isDeclined()
print 'error',payment.isError()
``:code

注意：上面使用的编码是一个伪的测试账户，你需要在Authorize.NetS（它不是一个
免费的服务）上注册并且提供你的登录、transkey、testmode=True 或False给这个AMI构造函数。

### Dropbox API

``Dropbox.com``:inxx

Dropbox是一个非常流行的存储服务。它不仅存储你的文件而且保持与你的机器同步
的云存储。它允许你创建群并且把读/写变量文件夹的权利给予个人用户或群体。
它也保持所有你的所有文件版本历史，包括文件夹“Public”和放在这儿的每一个文件
会都将有它自己的公共URL。Dropbox是一个进行协作的很好方式：
通过注册，你可以轻松访问dropbox：

``
https://www.dropbox.com/developers
``

你将获得``APP_KEY`` 和 ``APP_SECRET``， 一旦有了它们，你就可以使用Dropbox来验证你的用户身份。
创建一个文件叫做"yourapp/private/dropbox.key"并在它里面写：
``
<APP_KEY>:<APP_SECERT>:app_folder
``
此处 ``<APP_KEY>`` 和``APP_SECRET`` 是你的钥匙和密码。

然后在“models/db.py”中做：

``
from gluon.contrib.login_methods.dropbox_account import use_dropbox
use_janrain(auth,filename='private/dropbox.key')
mydropbox = auth.settings.login_form
``

这将允许用户使用他们的dropbox证书登录进你的应用程序，并且你的程序将会上传
文件到它们的dropbox账户：

``
stream = open('localfile.txt','rb')
mydropbox.put('destfile.txt',stream)
``

下载文件：

``
stream = mydropbox.get('destfile.txt')
open('localfile.txt','wb').write(read)
``

并获取目录列表：

``
contents = mydropbox.dir(path = '/')['contents']
``

### Twitter API

这里是一些关于如何post/get（发布/获取）tweet的快速例子，不需要第三方库，因为
Twitter使用简单的RESful API。

这里是一个如何发布tweet的例子：
``
def post_tweet(username,password,message):
    import urllib, urllib2, base64
    import gluon.contrib.simplejson as sj
    args= urllib.urlencode([('status',message)])
    headers={}
    headers['Authorization'] = 'Basic '+base64.b64encode(
        username+':'+password)
    req = urllib2.Request(
        'http://twitter.com/statuses/update.json',
        args, headers)
    return  sj.loads(urllib2.urlopen(req).read())
``:code

这里是一个如何接收tweet的例子：
``
def get_tweets():
    user='web2py'
    import urllib
    import gluon.contrib.simplejson as sj
    page = urllib.urlopen('http://twitter.com/%s?format=json' % user).read()
    tweets=XML(sj.loads(page)['#timeline'])
    return dict(tweets=tweets)
``:code

更多复杂操作，参考Twitter API文档。

### 流虚拟文件
``streaming``:inxx

恶意攻击者扫描网站的漏洞是很常见的。他们使用安全扫描器像Nessus去探索目标网
站上的已知漏洞脚本。从扫描机或直接在Nessus的数据库中的Web服务器日志分析揭示了大部分已知漏洞在PHP脚本和ASP脚本。因为我们运行的是web2py，所以我们没有这些漏洞，但是我们仍然会被扫描。这是令人烦恼的，因此我们乐意回应那些漏洞扫描并让攻击者明白他们正在浪费时间。
一种可能性是重定向所有的.php，.asp请求以及任何可疑的到一个虚设行为，通过响
应这个攻击，让攻击者花费大量的时间忙于此，最后攻击者会放弃并不再扫描我们。
这个方案需要两部分。

一个被称为 **jammer** 附带“default.py”控制器干扰的专门应用程序，定义如下：
``
class Jammer():
   def read(self,n): return 'x'*n
def jam(): return response.stream(Jammer(),40000)
``:code

当这个动作被调用，它会一次用一个无限的充满“x”-es的40000个字符数据流响应。

第二成分是一个“route.py”文件，该文件重定向任何以.php，.asp等结束的请求（包
括大写和小写）给这个控制器。
``
route_in=(
 ('.*\.(php|PHP|asp|ASP|jsp|JSP)','jammer/default/jam'),
)
``:code

第一次你被攻击，可能会产生一个小的开销，而我们的经验是，同一个攻击者不会再
尝试第二次。

