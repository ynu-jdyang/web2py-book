## 概述

### 启动

``Linux``:inxx ``Mac``:inxx ``Windows``:inxx

wweb2py 提供用于Windows 和Mac OS X 的二进制包。二进制版本包含了Python 解释器， 因此用户不需要预先安装。源代码版本能在
Windows、Mac、Linux和其它Unix系统上运行。Windows和OS X上的二进制版本包括必要的Python解释器。源代码包版本假定计算机安装了Python。

web2py 不需要安装。启动时，针对特定的操作系统，解压下载的压缩（zip）文件，并运行相应的web2py文件。

在Windows上，运行:
``
web2py.exe
``:code

在OS X上，运行：
``
open web2py.app
``:code

在Unix和Linux上，通过输入以下命令从源代码运行：
``
python2.5 web2py.py
``:code

为了在Windows 上从源代码运行web2py，需要先安装Mark Hammond's "Python for Windows extensions，之后运行:
``
python2.5 web2py.py
``:code


web2py程序接受各种命令行选项，这将在后面讨论。

默认情况下，在启动时，web2py会显示一个启动窗口，然后显示一个GUI部件，要求您选择一个一次性管理员密码、网络接口的IP地址和端口号，其中
IP 地址用于web 服务器， 端口号用于服务请求。web2py 默认情况下在127.0.0.1:8000（本地主机localhost上的8000端口）上运行它的Web 服务器，
但它也能够在任何可用的IP地址和端口上运行。你可以查询网络接口的IP地址，方法是在Windows 下打开命令行、键入ipconfig 或在OS X 和Linux 下键入
ifconfig。从现在开始，我们假定web2py在localhost（127.0.0.1:8000）上运行。使用0.0.0.0:80可以在任何网络接口上运行公开web2py

[[image @///image/en400.png center 306px]]

如果你不提供管理员密码，管理界面是不可用的。这是为了防止暴露管理界面而采取的安全措施。

管理界面， **admin**， 仅能通过localhost（本地主机）访问，除非你在后台使用带有mod_proxy的Apache服务器上运行web2py。 如果 **admin** 检测到代理， 会话
cookie 被设为安全，**admin** 登录不起作用，除非客户端和代理之间的采用HTTPS通信；这是一项安全措施。客户端和 **admin** 之间的所有通信必须始终是
本地的或加密的；否则，攻击者将能发动中间攻击或重放（replay）攻击，并在服务器端执行任意代码。

设置管理密码后，web2py在如下页面启动web浏览器：
``
http://127.0.0.1:8000/
``:code

如果计算机没有默认的浏览器，打开一个web浏览器并输入URL。

[[image @///image/en500.png center 480px]]

点击 "administrative interface"，将带你到管理界面的登录页面。

[[image @///image/en600.png center 480px]]

The administrator password is the password you chose at startup.
管理员密码是您在启动时选择的密码。请注意，管理员只有一个，因此也只
有一个管理员密码。出于安全原因，web2py每次启动时，开发人员都要选择一
个新密码，除非<recycle>选项被指定。这有别于web2py应用中的身份验证机制。

管理员登录web2py之后，浏览器被定向到"site"页面。

[[image @///image/en700.png center 480px]]

该页面列出了全部已安装的web2py应用，并允许管理员管理它们。
web2py带有3个应用：
``admin``:inxx ``examples``:inxx ``welcome``:inxx ``scaffolding``:inxx
- **admin** 应用，即你正在使用的应用。
- **examples**应用，包含在线交互式文档和一个web2py官方网站的副本。
- **welcome** 应用。这是任何其它web2py应用的基本模板，也被称为基本
构建应用（scaffolding application）。它也是在启动时欢迎用户的应用。

``appliances``:inxx
立即可用的web2py应用被称作 web2py “appliances”.  你可以在``appliances``下载许多免费提供的应用范例。鼓励web2py用户提交新的应用范例，无论是以开源还是闭源（编译和包装）的形式。

从**admin** 应用的''site'' 页面，你可以执行以下操作：
- 通过填写页面右下角的表单，**install** 应用。给应用命名，选择包含封装应用的
文件夹或应用所处位置的URL，并点击“submit”。
- 通过点击相应按钮，**uninstall** 应用。有一个确认页面。
- 通过选择一个名称，并点击**create** 即可创建一个新应用。
- 通过点击相应的按钮，**package** 应用发行。下载的应用是一个包括数据库的完整
压缩（tar）文件。你不用解压这个文件；使用**admin**安装后web2py会自动
将它解压。
- **clean up** 应用临时文件，例如会话、错误和缓存文件。
- **EDIT**应用。

-----
在你用 **admin**创建新应用时， 它开始是作为带有一
个"models/db.py"的"welcome"基本构建应用的克隆，"models/db.py"创建一个SQLite数据库，并连接到该数据库，实例化Auth、Crud和Service，并配置它们它还提供了一个"controller/default.py"，为用户管理暴露了动作"index"、"download"和"user"，为服务暴露了"call"。下面，我们假设这些文件已被删除；我们将从头开始创建应用。
-----

-----
web2py中配备的 **wizard**，在本章后面介绍，基于网络上提供的布局、插件和
模型的高层次描述，向导能为用户编写替代框架代码。
-----

### 问好
``index``:inxx

作为一个例子，我们现在创建一个简单的Web应用，它向用户显示"Hello from MyApp"。我们把这个应用称为“myapp”。我们还将增加一个统计用户访问
相同页面次数的计数器。

通过在**admin**内**site** 页面右上角表单中键入应用的名称，你就可以创建一个新应用。

[[image @///image/en800.png center 447px]]

你按下[create]之后，新应用就会作为内置welcome的副本被创建。

[[image @///image/en900.png center 480px]]

要运行新应用，请访问：
``
http://127.0.0.1:8000/myapp
``:code

现在，你有一个welcome应用的副本了。

为了编辑应用，可以点击新创建应用的 ''design'' 按钮。

**Edit**页面告诉你应用内部有些什么。每个web2py应用包括一些特定文件，其中大部分可归纳为以下六类：
- **models**：描述数据表示。
- **controllers**:描述了应用逻辑和工作流程。
- **views**:描述数据表达。
- **languages**: 描述如何将应用表达翻译成其它语言。
- **modules**: 属于应用的Python模块。
-**staticfiles**:静态图像，CSS[css:w,css:o,css:school]文件，JavaScript[js:w,js:b]文件等等。 files``css-w,css-o,css-school``:cite , JavaScript files``js-w,js-b``:cite , etc.
- **plugins**::用于设计协同工作的文件组。
 
遵循MVC设计模式，应用设计井然有序。edit页面中的每个部分对应于应用文件夹的一个子文件夹。

请注意，节标题将切换其内容。静态文件的文件夹名称也是可折叠的。

-------
节中列出的每个文件对应于子文件夹中的实体文件。通过 **admin** 界面对文件
的任何操作（创建、编辑、删除），都可以使用您偏爱的编辑器直接从shell执行。
-------

该应用包含其它类型的文件（数据库、会话文件、错误文件等），但它们并没有在编辑页面中列出，因为它们不是由管理员创建或修改的;它们由应用本身
创建和修改。

控制器包含应用逻辑和工作流程。每个URL都被映射成控制器（action）中某个函数的调用。有两个默认控制器：："appadmin.py"和"default.py"。 **appadmin** 提
供数据库管理界面；目前我们还不需要它。“default.py”是你需要编辑的控制器，当URL中没有指定控制器时，默认调用它。编辑"index"函数如下：
``
def index():
    return "Hello from MyApp"
``:code

下面是在线编辑器的图示：

[[image @///image/en1000.png center 480px]]

保存并返回到edit页面。点击index链接访问新创建的页面。

当你访问URL时
``
http://127.0.0.1:8000/myapp/default/index
``:code

myapp应用中的默认控制器的index行为将被调用。它返回一个在浏览器中显示的字符串。如下图所示：

[[image @///image/en1100.png center 480px]]

现在，编辑"index"函数如下：
``
def index():
    return dict(message="Hello from MyApp")
``:code

从edit页面，编辑视图"default/index.html"（视图文件与action有关），并且用如下内容完全替换该文件的当前内容：
``
<html>
   <head></head>
   <body>
      <h1>{{=message}}</h1>
   </body>
</html>
``:code

现在action返回一个定义``message``的字典。当action返回一个字典时，web2py会查找一个名称如下的视图：

``[controller]/[function].[extension]``:code

 并执行它。这里[extension]是请求的扩展名。如果没有指定扩展名，默认为"html" ，这里我们也将这样假设。在这个假设下，视图是一个使用特殊标签{{
}}并嵌入Python 代码的HTML 文件。特别是，在本例中 ``{{=message}}`` 指示web2py用action返回的``message`` 值取代标签代码。注意，这里 ``message`` 不是一
个web2py关键字，但被定义在action中。到目前为止我们没有使用任何web2py关键字。

如果web2py没有找到请求的视图, 它将使用通用视图“generic.html”。

-------
如果指定"html"以外的扩展名（例如"json"），并且视图文件"[controller]/[function].json"未被找到，web2py将查找"generic.json"视图。web2py带有generic.html、generic.json、generic.xml和generic.rss。应用可以单独修改这些通用视图，并且可以很容易的添加其它视图。
-------

-------
通用视图是一种开发工具。在生产中每个action都应有自己的视图。实际上，默认时通用视图只能从localhost启用。
-------

-------
你也可以使用 ``response.view = 'default/something.html'``指定一个视图。
-------

在第10章中，你也可以阅读这个主题的更多内容。

如果你回到"EDIT" 并点击index，你将看到如下HTML页面：

[[image @///image/en1200.png center 480px]]

为了调试目的，你可以随时添加如下代码

``
{{=response.toolbar()}}
``:code

到视图中，它会向你显示一些有用信息，包括请求、响应和会话对象，并列出所有数据库查询及其时间。

### 计数
``session``:inxx
我们现在添加一个计数器到向页面中，该计数器将统计相同访问者访问页面的次数。

web2py将自动、透明的使用会话和cookie追踪访问者。对于新访问者,它创建一个会话并分配唯一的"session_id"。会话是一个存储服务器端变量的容器。唯一的id通过cookie发送到浏览器。当访问者请求同一应用中的另一页面时，浏览器发回cookie，它被web2py回收并且相应的会话被恢复。

为了使用会话，修改默认控制器如下：
``
def index():
    if not session.counter:
        session.counter = 1
    else:
        session.counter += 1
    return dict(message="Hello from MyApp", counter=session.counter)
``:code

注意 ``counter`` 不是web2py关键字但 ``session`` 是。我们要求web2py检查会话中是否有计数器变量，如果没有创建一个并将其设为1。如果有计数器变量，我
们要求web2py把计数器的值加1。最后，我们把计数器的值传递给视图。

更紧凑的实现相同功能的代码如下：
``
def index():
    session.counter = (session.counter or 0) + 1
    return dict(message="Hello from MyApp", counter=session.counter)
``:code

现在修改视图，添加一行显示计数器值的代码：
``
<html>
   <head></head>
   <body>
      <h1>{{=message}}</h1>
      <h2>Number of visits: {{=counter}}</h2>
   </body>
</html>
``:code

当你再次访问index页面时，你应该得到以下HTML页面：

[[image @///image/en1300.png center 480px]]

计数器与每个访问者相关，访问者每次重载页面时计数器递增1。不同访问者看到的计数器不同。

### 访问我的名字
``form``:inxx ``request.vars``:inxx

现在创建两个页面(first和second)，其中first页面创建一个表单，询问访问者的名字，并重定向到second页面，second页面通过名字问候访问者。

[[yUML diagram @///image/en1400.png center 293px]]

在默认控制器中写入相应action(动作)：
``
def first():
    return dict()

def second():
    return dict()
``:code

然后为first action创建一个视图"default/first.html"，并输入：
``
{{extend 'layout.html'}}
What is your name?
<form action="second">
  <input name="visitor_name" />
  <input type="submit" />
</form>
``:code

最后，为second action创建一个视图"default/second.html"：
``
{{extend 'layout.html'}}
<h1>Hello {{=request.vars.visitor_name}}</h1>
``:code

``layout``:inxx
在这两个视图中，我们都扩展了web2py自带的基本视图"layout.html"。layout视图保持两页面的外观和感觉一致。因为layout文件主要包含HTML代码，因此可以轻松地编辑和替换。

如果你现在访问first页面，输入你的姓名：

[[image @///image/en1500.png center 480px]]

并提交表单，你将收到一个问候：

[[image @///image/en1600.png center 480px]]

### 回传
``redirect``:inxx ``URL``:inxx ``postback``:inxx

T我们之前使用的表单提交机制是很常见的，但这并不是好的编程习惯。在上面的例子中，应当验证所有的输入，验证的负担会落在secondaction上。执行验证的action与生成表单的action是不同的。这往往造成代码冗余。

一个更好的表单提交模式是将表单提交给生成它们的action，在我们的例子中是"first"。"first"action应该接受变量、处理变量和将变量存储在服务器端，并将访问者重新定向到"second"页面，这个页面将回收变量。这种机制被称为回传（postback）。

[[yUML diagram @///image/en1700.png center 293px]]

修改默认控制器以实现自提交：
``
def first():
    if request.vars.visitor_name:
        session.visitor_name = request.vars.visitor_name
        redirect(URL('second'))
    return dict()

def second():
    return dict()
``:code

之后，修改视图"default/first.html"：
``
{{extend 'layout.html'}}
What is your name?
<form>
  <input name="visitor_name" />
  <input type="submit" />
</form>
``:code

并且"default/second.html"视图需要从 ``session``而非``request.vars``恢复数据：
``
{{extend 'layout.html'}}
<h1>Hello {{=session.visitor_name or "anonymous"}}</h1>
``:code

从访问者的角度，自提交与以前的实现方法表现完全相同。我们还没有加入验证，但现在很清楚验证应该由first action执行。

这种方法比较好，因为访问者的名字留在session中，并且应用中所有action和view都可以访问它而无需显式传递。

注意，在访问者设定名字之前，如果"second" action 被调用，它将显示"Hello anonymous"，因为``session.visitor_name`` 返回``None``. 另外，我们可以在
控制器中添加下面的代码（在 ``second`` 函数内）：

``
if not request.function=='first' and not session.visitor_name:
    redirect(URL('first'))
``:code

这是在控制器上强制授权的一种普遍机制，不过功能更强大的方法参阅第9章。

``FORM``:inxx ``INPUT``:inxx ``requires``:inxx ``IS_NOT_EMPTY``:inxx ``accepts``:inxx

使用web2py，我们可以更进一步，请web2py为我们生成包括验证的表单。web2py提供帮助对象(FORM、INPUT、TEXTAREA和SELECT/OPTION)，它们与等效的HTML标签同名。它们可以用于在控制器或视图中构建表单。

例如，这里是改写first action的一种可能方式:
``
def first():
    form = FORM(INPUT(_name='visitor_name', requires=IS_NOT_EMPTY()),
              INPUT(_type='submit'))
    if form.process().accepted:
        session.visitor_name = form.vars.visitor_name
        redirect(URL('second'))
    return dict(form=form)
``:code

这里我们说FORM标签包含两个INPUT标签。input标签的属性由以下划线开头的命名参数指定。``requires``参数不是一个标签属性（因为它不以下划线开头），但它为visitor_name的值设置了一个验证。

这里是创建相同表单的另一种更好的方式：

``
def first():
    form = SQLFORM.factory(Field('visitor_name', requires=IS_NOT_EMPTY()))
    if form.process().accepted:
        session.visitor_name = form.vars.visitor_name
        redirect(URL('second'))
    return dict(form=form)
``:code

通过在视图"default/first.html"中嵌入``form``对象，可以很容易的在HTML中将它序列化。
``
{{extend 'layout.html'}}
What is your name?
{{=form}}
``:code

``form.process()``方法使用了验证器并返回表单本身。如果表单已经被处理并通过验证,form.accepted变量将被设为True。如果自提交表单通过验证，它将在会话中存储变量并像以前一样重定向。如果表单没有通过验证，错误消息会被插入到表单中，并以如下方式显示给用户：

[[image @///image/en1800.png center 480px]]

下一节，我们将展示如何从模型自动生成表单。

### 图像博客
``upload``:inxx

作为另一个例子，在这里我们希望创建一个Web应用，它允许管理员发布图片并给它们命名，同时允许网站访问者查看命名的图片并提交评论。

像以前一样，从 **admin**中的**site** 页面创建一个命名为``images``的新应用，并导航到edit页面：

[[image @///image/en1900.png center 480px]]

我们开始创建一个模型，即应用中持久数据的表示(上传的图像、它们的名字和评论)。首先，你需要创建/编辑模型文件，由于缺乏想象力，我们称之为"db.py"。我们假设下面的代码将取代"db.py"中任何现有的代码。模型和控制器必须具有``.py``扩展名，因为它们是Python代码。如果没有提供扩展名，web2py会添加。视图具有``.html``扩展名，因为它们主要包含HTML代码。

通过点击相应的"edit"按钮，可以编辑"db.py"文件

[[image @///image/en2000.png center 480px]]

并输入以下代码 ：

``IS_EMAIL``:inxx ``IS_NOT_EMPTY``:inxx ``IS_IN_DB``:inxx
``
db = DAL("sqlite://storage.sqlite")

db.define_table('image',
   Field('title', unique=True),
   Field('file', 'upload'),
   format = '%(title)s')

db.define_table('comment',
   Field('image_id', db.image),
   Field('author'),
   Field('email'),
   Field('body', 'text'))

db.image.title.requires = IS_NOT_IN_DB(db, db.image.title)
db.comment.image_id.requires = IS_IN_DB(db, db.image.id, '%(title)s')
db.comment.author.requires = IS_NOT_EMPTY()
db.comment.email.requires = IS_EMAIL()
db.comment.body.requires = IS_NOT_EMPTY()

db.comment.image_id.writable = db.comment.image_id.readable = False
``:code

让我们来逐行分析。

第1行定义一个表示数据库连接的称为``db``的全局变量。在本例中，它是一个到SQLit 数据库连接，该数据库存储在"applications/images/databases/storage.sqlite"文件中。在SQLite情况下，如果数据库不存在则创建它。你可以更改文件和全局变量``db``的名称，但给予它们相同的名称更便于记忆。

第3-5行定义一个"image"表。``define_table`` 是 ``db`` 对象的一个方法。第一个参
数"image"是我们定义的表的名称。其它参数都是属于该表的字段。该表有一个"title"字段，一个"file"字段，一个"id"字段，并且"id"字段作为表的主键（"id"没有显式声明，因为默认时所有表都有一个id字段）。"title"字段是一个字符串，字段"file"是"upload"类型。"upload"是一个特殊的字段类型，web2py数据抽象层（DAL）用它来存储上传文件的名称。web2py知道如何上传文件（如果文件大则用流媒体）、安全的重命名文件和存储文件。

当定义表时，web2py可能采取如下动作之一：
- 如果表不存在则创建它;
-如果表存在但不符合定义，表将被相应的修改，如果字段有不同的类型，web2py会设法转换其内容；
- 如果表存在并且符合定义，web2py不执行任何操作。

这种行为被称为"migration"。在web2py中迁移（migration）是自动的，但
通过传递``migrate=False``作为``define_table``的最后一个参数，可以禁用每个表的迁移。

第6行为表定义了一个格式字符串。它决定如何将记录表示为一个字符串。请注意，``format`` 参数也可以是一个函数，该函数需要一个记录并返回一个字符串。例如：

``
format=lambda row: row.title
``:code

Lines 8-12 define another table called "comment".
8-12 行定义另一个名为"comment" 的表。一条评论包含"author" 、"email"（我们打算存储评论者的电子邮件地址）、"text"类型
的"body"（我们打算用它来存储作者发布的评论）和引用类型的通过"id"字段指向``db.image`` 的"image_id"字段。

在第14行，``db.image.title`` 表示"image"表的"title" 字段。属性``requires`` 允许你设置web2py表单强制执行的规定/限制。这里我们要求"title"是唯一的：

``IS_NOT_IN_DB(db, db.image.title)``:code

''注意这是可选的，因为 ``Field('title', unique=True)``它将被自动设置。''

表示这些限制的对象被称为验证。多个验证可以组合在一个列表中，并且根据出现的顺序执行验证。
``IS_NOT_IN_DB(a, b)`` 是一个特殊验证，它检查新记录字段``b`` 的值是否已经在``a``中。

第15行要求表"comment"的"image_id"字段在 ``db.image.id``中。就涉及的数据库而言，当定义表"comment"时我们已经声明了这一点。
该条件应当由web2py强制执行，这样无效值就不会从输入表单传递到数据库。 我们还要求用相应记录的"title" ，即``'%(title)s'``来代表"image_id"。

第20 行表明"comment" 表的字段"image_id" 不应显示在表单中``writable=False`` ，甚至只读形式也不行``readable=False``。

15-17行中验证的含义应该是显而易见的。

``format``:inxx
注意如下验证
``
db.comment.image_id.requires = IS_IN_DB(db, db.image.id, '%(title)s')
``:code

如果我们为引用的表指定格式，可以省略（并且是自动的）它：
``
db.define_table('image', ..., format='%(title)s')
``:code

这里格式可以是一个字符串或一个函数，它接收一个记录并返回一个字符串。

``appadmin``:inxx
一旦模型被定义，如果没有错误，web2py创建一个应用管理界面来管理数据库。你可以通过edit页面中的"database administration"链接来访问它，或者直接访问：
``
http://127.0.0.1:8000/images/appadmin
``:code

下面是appadmin界面的截图：

[[image @///image/en2100.png center 480px]]

此界面在控制器"appadmin.py"和相应的视图"appadmin.html"中编码。从现在起，我们将把这一界面简单的称作**appadmin**。它允许管理员插入新的数据库记录、编辑和删除现有记录、浏览表和进行数据库连接。

**appadmin**第一次被访问时，执行模型并创建表。web2pyDAL将Python代码翻译成针对选定数据库后台（本例中是SQLite）的SQL语句。通过点击"models"下的"sql.log"链接，你可以从edit页面看到生成的SQL。注意在表被创建之前链接是不存在的。

[[image @///image/en2200.png center 480px]]

如果你要编辑模型，并再次访问**appadmin**，web2py会生成SQL来修改现有的表。生成的SQL被记录在“sql.log”中。

现在回到 **appadmin** ，并尝试插入一个新的图片记录：

[[image @///image/en2300.png center 480px]]

web2py翻译``db.image.file``的"upload"字段为文件的上传表单。当表单被提交并且图像文件被上传时，将以安全的保留扩展名的方式重命名文件，将用新文件名存储该文件到应用"uploads"文件夹中，新文件名将被保存在``db.image.file``字段中。该过程被设计来防止目录遍历攻击。

请注意，每个字段类型由一个部件(widget)呈现。默认部件可能被重写。

当你在**appadmin**中点击表名时，web2py在当前表中执行选择所有记录，并由DAL查询确定
``
db.image.id > 0
``:code

且呈现结果如下。

[[image @///image/en2400.png center 480px]]

通过编辑SQL查询并按[Submit]，你可以选择不同的记录集。

若要编辑或删除单个记录，可以点击记录的id号。

由于``IS_IN_DB``验证，引用字段“image_id”将被下拉菜单呈现。下拉项目将被存储为键(``db.image.id``)，但由``db.image.title``表示，正如验证指定的一样。

验证器是功能强大的对象，它知道如何表示字段、过滤字段值、生成错误和格式化从字段中提取的值。

当你提交一个表单但未通过验证时，下图显示了发生的情况：

[[image @///image/en2500.png center 480px]]

由**appadmin**自动生成的相同表单，也可以通过``SQLFORM``帮助对象编程产生并嵌入用户应用中。这些表单都是CSS友好的并且可定制。

每个应用都有自己的**appadmin**；因此，**appadmin**本身可以被修改而不影响其它应用。

到目前为止，应用知道如何存储数据，并且我们已经看到如何通过**appadmin**访问数据库。仅限管理员访问**appadmin**appadmin，它的目的不是作为一个应用的生产网络接口；故下一部分逐步解说。具体来说，我们要创建：
-一个"index"页面，按页面的标题排序，列出所有可用的图像以及图像详细信息页面的链接。
- 一个"show/[id]"页面，显示访问者请求的图像并允许访问者查看和发表评论。
- 一个"download/[name]"动作，下载上传的图片。

用示意图表示如下：

[[yUML diagram @///image/en2600.png center 480px]]

返回到 ''edit''页面，编辑的"default.py"控制器，取代其内容如下：

``select``:inxx
``
def index():
    images = db().select(db.image.ALL, orderby=db.image.title)
    return dict(images=images)
``:code

此动作返回一个字典。字典中的项目的键被解释为变量，传递给与动作相关的视图。开发时，如果有没有视图，动作被"generic.html"视图呈现，每个web2py应用都提供该视图。

index动作执行对表image中所有字段(``db.image.ALL``)的选择，按照``db.image.title``排序。选择的结果是一个``Rows``对象，其中包含选中的记录。将它赋值给一个局部变量，该局部变量叫做``images``，由动作返回给视图。``images``是迭代的，它的元素是选定的行。每行的列可以作为字典访问：
``images[0]['title']`` 或等价为 ``images[0].title``.

如果你没有写视图,字典将被"views/generic.html"呈现并且对index动作的调用看起来将是这样的：

[[image @///image/en2700.png center 480px]]

你还没有为该动作创建视图，因此web2py用普通表格形式呈现记录组。

着手为index动作建立一个视图。返回admin，编辑"default/index.html"并将其内容替换如下：
``
{{extend 'layout.html'}}
<h1>Current Images</h1>
<ul>
{{for image in images:}}
{{=LI(A(image.title, _href=URL("show", args=image.id)))}}
{{pass}}
</ul>
``:code

T首先要注意的是，视图是有特殊标签{{...}}的纯HTML。嵌入{{...}}中的代码是纯Python代码，一点需要注意：缩进是无关紧要的。代码块开始于以冒号(:)结束的行并终止于以关键词``pass``结尾的行。在某些情况下，块的结尾从上下文看是很明显的，不需要使用``pass``。

5-7行循环image的行，并为每行显示：
``
LI(A(image.title, _href=URL('show', args=image.id))
``:code

这是一个 ``<li>...</li>`` 标签，其中包含``<a href="...">...</a>`` 标签，该标签中包含``image.title``。超文本引用（href属性）的值是：
``
URL('show', args=image.id)
``:code

即同一应用中的URL和控制器，该控制器作为当前请求调用函数"show"，传递一个参数给函数``args=image.id``。
``LI``, ``A``等是web2py帮助对象，它们映射到相应的HTML标签。 它们的未命名参数被解释为需要序列化的对象并被插入标签内的HTML。。以下划线开始的命名参数被解释为不带下划线的标记属性。(例
如，``_href`` 是 ``href`` 属性， ``_class`` 是``class`` 属性等。

作为一个例子，下面的语句：
``
{{=LI(A('something', _href=URL('show', args=123))}}
``:code

被呈现为：
``
<li><a href="/images/default/show/123">something</a></li>
``:code

少数帮助对象(``INPUT``， ``TEXTAREA``， ``OPTION`` 和 ``SELECT``SELECT)也支持一些特殊的不以下划线开始的命名属性(``value``和``requires``)。对于构建自定义表单它们是重要的
并将在稍后讨论。

返回 ''edit''页面。它现在表明"default.py exposes（暴露） index"。通过点击"index"，你可以访问新建的页面：
``
http://127.0.0.1:8000/images/default/index
``:code

它看起来像：

[[image @///image/en2800.png center 480px]]

如果你点击图片名链接，你将被定向到：
``
http://127.0.0.1:8000/images/default/show/1
``:code

这将导致错误，因为你还没有在控制器"default.py"中创建名为"show"的动作。

让我们编辑"default.py"控制器并将其内容替换如下：

``SQLFORM``:inxx ``accepts``:inxx ``response.flash``:inxx ``request.args``:inxx
``response.download``:inxx
``
def index():
    images = db().select(db.image.ALL, orderby=db.image.title)
    return dict(images=images)

def show():
    image = db(db.image.id==request.args(0)).select().first()
    db.comment.image_id.default = image.id
    form = SQLFORM(db.comment)
    if form.process().accepted:
        response.flash = 'your comment is posted'
    comments = db(db.comment.image_id==image.id).select()
    return dict(image=image, comments=comments, form=form)

def download():
    return response.download(request, db)
``:code

控制器包含两个动作："show"和"download"。
。"show"动作用从请求args中解析得到的``id``，选择图片和与其相关的所有评论。之后"show"将一切传递给视图"default/show.html"。

引用的图片id：
``
URL('show', args=image.id)
``:code

在"default/index.html"中，可以作为："show"动作中的``request.args(0)``被访问。


"download"动作期待``request.args(0)``中的文件名，建立一个路径到文件应该存在的位置，并把它发送回客户端。如果文件过大，它流式传输该文件，而不产生任何内存开销。

请注意以下语句：
-第7行仅使用指定字段，为表 ``db.comment`` 创建一个插入表单SQLFORM。
-第8行设定引用字段的值，它不是输入表单的一部分，因为它不在上面指定的字段列表中。              
-第9行在当前会话（会话用来防止重复提交，强制执行导航）中处理提交的表单（提交的表单变量在``request.vars``中）。如果提交的表单变量经过验证，在表``db.comment``中插入新评论；否则的话，表单被修改以包括错误消息（例如，如果作者的电子邮件地址无效）。这一切都是在第9行中完成的！
- 表单被接受第10行才会被执行，在记录被插入数据库表之后。``response.flash`` 是一个web2py变量，它被显示在视图中并被用来通知访问者发生了一些事情。
- 第11行选择所有引用当前图片的评论。

-------
在基本构建应用的"default.py"控制器中，已经定义了"download"动作。
-------

"download"动作不返回字典，因此它不需要视图。不过，"show"动作应该有视图，因此返回 **admin** 并创建一个新的视图叫做"default/show.html"。

编辑这个新文件，并替换为以下内容：
``
{{extend 'layout.html'}}
<h1>Image: {{=image.title}}</h1>
<center>
<img width="200px"
     src="{{=URL('download', args=image.file)}}" />
</center>
{{if len(comments):}}
  <h2>Comments</h2><br /><p>
  {{for comment in comments:}}
    <p>{{=comment.author}} says <i>{{=comment.body}}</i></p>
  {{pass}}</p>
{{else:}}
  <h2>No comments posted yet</h2>
{{pass}}
<h2>Post a comment</h2>
{{=form}}
``:code

该视图通过调用<img ... /> 标签内的"download"动作显示**image.file**。如果有评
论，对它们循环，并显示每一个。

下面是显示给访问者的效果：

[[image @///image/en2900.png center 480px]]

当访问者通过此页提交评论，评论将被存储在数据库中并附加在页面底部。

### 添加CRUD

web2py还提供CRUD(Create/Read/Update/Delete)API，更加简化表单。使用CRUD，有必要在某处定义它，例如在文件"db.py"中：
``
from gluon.tools import Crud
crud = Crud(db)
``:code

-------
These two lines are already in the scaffolding application.
-------

``crud`` 对象提供高层次的方法，例如：
``
form = crud.create(table)
``:code

可以用来取代编程模式：
``
form = SQLFORM(table)
if form.process().accepted:
    session.flash = '...'
    redirect('...')
``:code

这里，我们使用crud对象改写以前的"show" 动作，并做更多的改进：

``
def show():
    image = db.image(request.args(0)) or redirect(URL('index'))
    db.comment.image_id.default = image.id
    form = crud.create(db.comment,
                       message='your comment is posted',
		       next=URL(args=image.id))
    comments = db(db.comment.image_id==image.id).select()
    return dict(image=image, comments=comments, form=form)
``:code

首先，注意我们使用如下语法

``
db.image(request.args(0)) or redirect(...)
``:code

来获取所需的记录。因为如果记录未找到，```table(id)`` 返回None，这种情况下我们可以在一行代码中使用``or redirect(...)`` 。

``crud.create``的``next``（下一个）参数是表单被接受之后重定向的URL。
``message`` 参数在验收后显示。你可以阅读第7章中有关CRUD的内容。

### 添加认证

web2py基于角色的访问控制API是相当复杂的，但是现在我们会限制自己，限制通过身份验证的用户访问show动作，更详细的讨论推迟到第9章。

为了限制通过身份验证的用户访问，我们需要完成三个步骤。在一个模型中例如"db.py"，我们需要添加：
``
from gluon.tools import Auth
auth = Auth(db)
auth.define_tables()
``:code

在我们的控制器中，我们需要添加一个动作：
``
def user():
    return dict(form=auth())
``:code

这足以启用登录，注册，注销网页等。默认布局也将在右上角显示相应页面的选项。

[[image @///image/en3000.png center 300px]]

现在我们可以修饰要限制的函数，例如：
``
@auth.requires_login()
def show():
    image = db.image(request.args(0)) or redirect(URL('index'))
    db.comment.image_id.default = image.id
    form = crud.create(db.comment, next=URL(args=image.id),
                     message='your comment is posted')
    comments = db(db.comment.image_id==image.id).select()
    return dict(image=image, comments=comments, form=form)
``:code

任何企图访问
``
http://127.0.0.1:8000/images/default/show/[image_id]
``:code

都需要登录。如果用户没有登录，用户将被重定向到
``
http://127.0.0.1:8000/images/default/user/login
``:code

[[image @///image/en3100.png center 480px]]

``user``函数也会暴露，其中包括下列动作：
``
http://127.0.0.1:8000/images/default/user/logout
http://127.0.0.1:8000/images/default/user/register
http://127.0.0.1:8000/images/default/user/profile
http://127.0.0.1:8000/images/default/user/change_password
http://127.0.0.1:8000/images/default/user/request_reset_password
http://127.0.0.1:8000/images/default/user/retrieve_username
http://127.0.0.1:8000/images/default/user/retrieve_password
http://127.0.0.1:8000/images/default/user/verify_email
http://127.0.0.1:8000/images/default/user/impersonate
http://127.0.0.1:8000/images/default/user/not_authorized
``:code

现在，为了能够登录并阅读或发表评论，初次使用者需要注册。

-------
``auth``对象和``user``函数都已经定义在基本构建应用中。``auth``对象高度可定制并且可以处理电子邮件验证，注册审批，CAPTCHA和通过插件的替代登录方法。
-------

#### 添加网格

使用``SQLFORM.grid``和``SQLFORM.smartgrid``小工具我们可以进一步改善，为我们的应用创建一个管理界面：

``
@auth.requires_membership('manager')
def manage():
    grid = SQLFORM.smartgrid(db.image)
    return dict(grid=grid)
``:code

带有相关的"views/default/manage.html"

``
{{extend 'layout.html'}}
<h2>Management Interface</h2>
{{=grid}}
``

使用appadmin创建组"manager"并使一些用户成为该组的成员。他们将不能访问

``
http://127.0.0.1:8000/images/default/manage
``

和浏览，搜索：

[[image @///image/en3200.png center 480px]]

创建，更新和删除图像以及它们的评论：

[[image @///image/en3300.png center 480px]]

### 配置布局

你可以通过编辑"views/layout.html"来配置默认布局，但你也可以配置它而无需编辑HTML。实际上，"static/base.css"样式表在第5章中有详细描述。你可以改变颜色，列，大小，边界和背景而无需编辑HTML。如果你要编辑菜单，标题或副标题，你可以在任何模型文件中操作。基本构建应用，在文件"models/menu.py"中设置这些参数的默认值：

``
response.title = request.application
response.subtitle = T('customize me!')
response.meta.author = 'you'
response.meta.description = 'describe your app'
response.meta.keywords = 'bla bla bla'
response.menu = [ [ 'Index', False, URL('index') ] ]
``:code

### wiki 维基
``wiki``:inxx ``RSS``:inxx ``Ajax``:inxx ``XMLRPC``:inxx
在本节中，我们建立一个维基，从无到有，并且不使用第12章中介绍的plugin_wiki提供的扩展功能。访问者能够创建页面，搜索（按照标题）并编辑它们。访问者还能发表评论（与之前的应用完全相似），上传文件（作为网页的附件）并从网页链接。作为惯例，我们的维基语法采用Markmin语法。我们还将使用Ajax实现一个搜索页面，该页面的RSS 订阅，以及一个通过 XML-RPC``xmlrpc``搜索该页面的句柄。

以下图表列出我们需要实现的动作以及我们打算建立的它们之间的链接。

[[yUML diagram @///image/en3400.png center 250px]]

开始创建一个新的基本构建应用，命名为"mywiki"。

该模型必须包含三个表：page（页面），comment（评论）和document（文档）。评论和文档都引用页面因为它们属于页面。文档包含upload类型的字段file，正如以前的 images应用。

下面是完整的模型：
``
db = DAL('sqlite://storage.sqlite')

from gluon.tools import *
auth = Auth(db)
auth.define_tables()
crud = Crud(db)

db.define_table('page',
    Field('title'),
    Field('body', 'text'),
    Field('created_on', 'datetime', default=request.now),
    Field('created_by', db.auth_user, default=auth.user_id),
    format='%(title)s')

db.define_table('comment',
    Field('page_id', db.page),
    Field('body', 'text'),
    Field('created_on', 'datetime', default=request.now),
    Field('created_by', db.auth_user, default=auth.user_id))

db.define_table('document',
    Field('page_id', db.page),
    Field('name'),
    Field('file', 'upload'),
    Field('created_on', 'datetime', default=request.now),
    Field('created_by', db.auth_user, default=auth.user_id),
    format='%(name)s')

db.page.title.requires = IS_NOT_IN_DB(db, 'page.title')
db.page.body.requires = IS_NOT_EMPTY()
db.page.created_by.readable = db.page.created_by.writable = False
db.page.created_on.readable = db.page.created_on.writable = False

db.comment.body.requires = IS_NOT_EMPTY()
db.comment.page_id.readable = db.comment.page_id.writable = False
db.comment.created_by.readable = db.comment.created_by.writable = False
db.comment.created_on.readable = db.comment.created_on.writable = False

db.document.name.requires = IS_NOT_IN_DB(db, 'document.name')
db.document.page_id.readable = db.document.page_id.writable = False
db.document.created_by.readable = db.document.created_by.writable = False
db.document.created_on.readable = db.document.created_on.writable = False
``:code

编辑控制器"default.py" 并创建以下动作：
- index: 列出所有的wiki页面
- create: 发布其它wiki页面
- show: 显示一个wiki页面以及它的评论，并追加评论
- edit: 编辑已有页面
- documents: 管理附加到一个页面的文件
- download: 下载文件（如在images例子中）
- search:显示一个搜索框并且，通过Ajax回调，在访问者输入的同时返回所有匹配的标题
- callback: Ajax回调函数。它返回在访问者输入时被嵌入搜索页面的HTML。

这里是"default.py"控制器：
``
def index():
     """ this controller returns a dictionary rendered by the view
         it lists all wiki pages
     >>> index().has_key('pages')
     True
     """
     pages = db().select(db.page.id,db.page.title,orderby=db.page.title)
     return dict(pages=pages)

@auth.requires_login()
def create():
     "creates a new empty wiki page"
     form = crud.create(db.page, next=URL('index'))
     return dict(form=form)

def show():
     "shows a wiki page"
     this_page = db.page(request.args(0)) or redirect(URL('index'))
     db.comment.page_id.default = this_page.id
     form = crud.create(db.comment) if auth.user else None
     pagecomments = db(db.comment.page_id==this_page.id).select()
     return dict(page=this_page, comments=pagecomments, form=form)

@auth.requires_login()
def edit():
     "edit an existing wiki page"
     this_page = db.page(request.args(0)) or redirect(URL('index'))
     form = crud.update(db.page, this_page,
                        next=URL('show',args=request.args))
     return dict(form=form)

@auth.requires_login()
def documents():
     "browser, edit all documents attached to a certain page"
     page = db.page(request.args(0)) or redirect(URL('index'))
     db.document.page_id.default = page.id
     db.document.page_id.writable = False
     grid = SQLFORM.grid(db.document.page_id==page.id,args=[page.id])
     return dict(page=page, grid=grid)

def user():
     return dict(form=auth())

def download():
     "allows downloading of documents"
     return response.download(request, db)

def search():
     "an ajax wiki search page"
     return dict(form=FORM(INPUT(_id='keyword',_name='keyword',
              _onkeyup="ajax('callback', ['keyword'], 'target');")),
              target_div=DIV(_id='target'))

def callback():
     "an ajax callback that returns a <ul> of links to wiki pages"
     query = db.page.title.contains(request.vars.keyword)
     pages = db(query).select(orderby=db.page.title)
     links = [A(p.title, _href=URL('show',args=p.id)) for p in pages]
     return UL(*links)
``:code


2-6行为index动作提供一个评论。评论中的4-5行由python解释成测试代码（doctest）。通过管理界面可以运行测试。在本例中，测试验证index动作运行没有错误。

第18,27和35行尝试用 ``request.args(0)``中的id获取一``page``记录。

第13,20行，为新页面和新评论定义和处理创建表单。

第28行定义和处理一个wiki页面的更新表单。

第38行创建一个``grid``对象来浏览，添加和更新链接到页面的评论。

一些奇妙的事情发生在第51行。INPUT标签"keyword"的onkeyup属性被设定。每次访问者放开按键，``onkeyup``属性中的JavaScript代码在客户端被执行。
下面是JavaScript代码：
``
ajax('callback', ['keyword'], 'target');
``:code
``ajax``是一个JavaScript函数定义在文件"web2py.js"中，默认的"layout.html"包
含该文件。它有三个参数：动作的URL，执行同步回调；列表中变量的ID，被
发送到回调(["keyword"])；和响应要插入响应的ID("target")。

只要你在搜索框中键入内容，并放开按键，客户端调用服务器并发送'keyword'字段的内容，并且，服务器响应时，响应被作为'target'标签的内部HTML嵌入到页面中。

'target'标签是一个DIV定义在第52行中。也可以在视图中定义它。

这里是视图"default/create.html"的代码：
``
{{extend 'layout.html'}}
<h1>Create new wiki page</h1>
{{=form}}
``:code

如果你访问**create**页面，你将看到以下内容：

[[image @///image/en3500.png center 480px]]

这里是视图"default/index.html"的代码：
``
{{extend 'layout.html'}}
<h1>Available wiki pages</h1>
[ {{=A('search', _href=URL('search'))}} ]<br />
<ul>{{for page in pages:}}
     {{=LI(A(page.title, _href=URL('show', args=page.id)))}}
{{pass}}</ul>
[ {{=A('create page', _href=URL('create'))}} ]
``:code

它将生成以下页面：

[[image @///image/en3600.png center 480px]]

这里是视图"default/show.html"的代码：

``markdown``:inxx ``MARKMIN``:inxx
``
{{extend 'layout.html'}}
<h1>{{=page.title}}</h1>
[ {{=A('edit', _href=URL('edit', args=request.args))}}
| {{=A('documents', _href=URL('documents', args=request.args))}} ]<br />
{{=MARKMIN(page.body)}}
<h2>Comments</h2>
{{for comment in comments:}}
  <p>{{=db.auth_user[comment.created_by].first_name}} on {{=comment.created_on}}
          says <I>{{=comment.body}}</i></p>
{{pass}}
<h2>Post a comment</h2>
{{=form}}
``:code

如果你想使用markdown语法取代markmin语法：

``
from gluon.contrib.markdown import WIKI
``:code

并使用``WIKI``取代``MARKMIN``帮助对象。另外，你可以选择原始的HTML取代markmin句法。在本例中，你将取代：
``
{{=MARKMIN(page.body)}}
``:code

用：
``
{{=XML(page.body)}}
``:code

``sanitize``:inxx
(这样XML没有得到转义，正如web2py默认行为）。

更好的做法如下：
``
{{=XML(page.body, sanitize=True)}}
``:code

通过设定``sanitize=True``，你告诉web2py转义不安全的XML标签例如"<script>"，这样防止XSS漏洞。

现在如果，从index页面，你点击页面标题，你可以看到你创建的页面：

[[image @///image/en3700.png center 480px]]

下面是视图"default/edit.html"的代码：
``
{{extend 'layout.html'}}
<h1>Edit wiki page</h1>
[ {{=A('show', _href=URL('show', args=request.args))}} ]<br />
{{=form}}
``:code

它产生一个看起来与create页面几乎相同的页面。

这里是视图"default/documents.html"的代码：
``
{{extend 'layout.html'}}
<h1>Documents for page: {{=page.title}}</h1>
[ {{=A('show', _href=URL('show', args=request.args))}} ]<br />
<h2>Documents</h2>
{{=grid}}
``:code

如果，从"show"页面，你点击文件，现在你可以管理附加到该页面的文件。

[[image @///image/en3800.png center 480px]]

最后下面是视图"default/search.html"的代码：
``
{{extend 'layout.html'}}
<h1>Search wiki pages</h1>
[ {{=A('listall', _href=URL('index'))}}]<br />
{{=form}}<br />{{=target_div}}
``:code

它生成如下Ajax搜索表单：

[[image @///image/en3900.png center 480px]]

你还可以尝试直接调用callback动作，例如通过访问如下URL：
``
http://127.0.0.1:8000/mywiki/default/callback?keyword=wiki
``:code

如果你看页面源代码，你会看到callback返回的 HTML：
``
<ul><li><a href="/mywiki/default/show/4">I made a Wiki</a></li></ul>
``:code

``rss``:inxx
使用web2py从存储的页面生成RSS订阅很容易因为web2py
包含``gluon.contrib.rss2``。
只需在默认控制器中追加如下动作：
``
def news():
    "generates rss feed form the wiki pages"
    reponse.generic_patterns = ['.rss']
    pages = db().select(db.page.ALL, orderby=db.page.title)
    return dict(
       title = 'mywiki rss feed',
       link = 'http://127.0.0.1:8000/mywiki/default/index',
       description = 'mywiki news',
       created_on = request.now,
       items = [
          dict(title = row.title,
               link = URL('show', args=row.id),
               description = MARKMIN(row.body).xml(),
               created_on = row.created_on
               ) for row in pages])
``:code

当你访问如下页面
``
http://127.0.0.1:8000/mywiki/default/news.rss
``:code

你会看到订阅（确定的输出取决于订阅的读者）。注意字典被自动转换成RSS，得益于URL中的.rss扩展。

[[image @///image/en4000.png center 480px]]

web2py中包含feedparser以读取第三方订阅。

``XMLRPC``:inxx
最后，让我们添加一个XML-RPC句柄，它允许以编程方式搜索wiki：
``
service = Service()

@service.xmlrpc
def find_by(keyword):
     "finds pages that contain keyword for XML-RPC"
     return db(db.page.title.contains(keyword).select().as_list()

def call():
    "exposes all registered services, including XML-RPC"
    return service()
``:code

这里，handler动作只是发布（通过XML-RPC）列表中指定的函数。
本例中，``find_by``.``find_by``不是一个动作（因为它需要一个参数）。它使用``.select()`` 查询数据库，使用``.response``提取记录作为一个列表并返回该列表。

下面是从外部Python程序访问XML-RPC句柄的一个例子。
``
>>> import xmlrpclib
>>> server = xmlrpclib.ServerProxy(
    'http://127.0.0.1:8000/mywiki/default/call/xmlrpc')
>>> for item in server.find_by('wiki'):
        print item['created_on'], item['title']
``:code

可以从许多其它理解XML-RPC 的编程语言访问句柄，包括C, C++, C#和Java。

#### 关于date, datetime和time属性格式

每个字段类型的 ``date``，``datetime`` 和``time有三种不同的表示：
- 数据库表示
- 内部web2py表示
- 表单和表中的字符串表示

数据库表示是一个内部问题并且不会影响代码。内部，在web2py层面，它们分别被作为``datetime.date``，``datetime.datetime``以及``datetime.time``对象存储，可以如下操纵它们：

``
for page in db(db.page).select():
    print page.title, page.day, page.month, page.year
``

使用ISO表示将日期转换成表单中的字符串
``
%Y-%m-%d %H:%M:%S
``

但这一表示是全局化的而且你可以使用admin翻译页面将格式改为备用。例如：
%m/%b/%

``
%m/%b/%Y %H:%M:%S
``

------
注意按照默认英语是不翻译的，因为web2py假定应用已经用英文编写。 如果你想让全局化适用于英语，你需要创建翻译文件（使用admin）而且你需要
声明应用的当前语言是英语以外的东西，例如：
``
T.current_languages = ['null']
``
------




### 关于**admin**的更多内容
``admin``:inxx

管理界面提供了附加功能，我们这里简要回顾。

#### ''site''页面
``site``:inxx

该页面列出所有安装的应用。底部有两个表单。

其中第一个表单允许通过指定名字创建新应用。

``Instant Press``:inxx
第二个表单允许从本地文件后远程URL上传已有应用。当你上传一个应用，你需要为它指定一个名字。这可以是它的原始名字，但并不需要是。这样能允许安装同一个应用的多个副本。
例如，你可以尝试从如下URL 上传由MartinMulone创建的Instant Press CMS：

``
http://code.google.com/p/instant-press/
``:code

------
Web2py文件打包成``.w2p`` 文件。这些是tar gzip压缩文件。Web2py使用``.w2p`` 扩展代替``.tgz``扩展来防止浏览器下载之后解压。可以使用``tarzxvf[filename]`` 手动解压它们，虽然从来没有必要这么做。
------

[[image @///image/en4100.png center 444px]]

成功上传之后，web2py显示上传文件的MD5校验。你可以用它验证文件在上传时没有被损坏。InstantPress会出现在已安装应用列表中。

在admin中，点击名字InstantPress来使它启动并运行。

[[image @///image/en4200.png center 480px]]

你可以通过如下URL阅读更多关于Instant Press的内容：
``
http://code.google.com/p/instant-press/
``

对每个应用， ''site''页面允许你：
- 卸载应用。
- 跳转到''about'' 页面（阅读下面）。
- 跳转到''edit''页面（阅读下面）。
- 跳转到''errors''页面（阅读下面）。
- 清理临时文件（会话、错误以及cache.disk文件）。
- 打包全部。这返回一个包含完整应用副本的tar文件。我们建议你在打包应用之前清理临时文件。
- 编译应用。如果没有错误，该选项将会bytecode编译所有模型，控制器和视图。因为视图可以在一个树中扩展和包含其它视图，在bytecode编译之前，
每个控制器的视图树都被折叠成一个单一的文件。净效应是一个bytecode编译的应用速度更快，因为在运行时没有模版解析和字符串替换。
- 包编译完成。该选项仅存在于bytecode编译完成的应用。它无需源代码即可打包应用作为封闭源代码用于发布。注意Python（与其它任何编程语言一
样）可以从技术上反编译；因此编译不能提供对源代码的完整保护。不过，反编译可能是困难的并且可能是违法的。
- 移除已编译。它简单的从应用中移除byte-code编译的模型，视图和控制器。如果应用打包带有源代码或者被本地编辑，移除bytecode编译文件没有任
何坏处，并且应用会继续工作。如果应用是从打包的编译文件安装的，那么这是不是安全，因为不能恢复到源代码，并且应用将不再工作。

``admin.py``:inxx

-------
web2py admin站点页面的所有功能都可以通过定义在 ``gluon/admin.py``模型中的API编程访问。只需打开一个Python shell（外壳）并导入该模型。
-------

#### ''about''页面
``about``:inxx ``license``:inxx

 ''about'' 允许编辑对应用的描述以及它的许可证。它们分别写入在应用文件夹中的ABOUT和LICENSE文件中。

[[image @///image/en4300.png center 480px]]

对这些文件，你可以使用 ``MARKMIN``，或``gluon.contrib.markdown.WIKI`` 语法，正如参考[``markdown2``中描述的一样。

#### ''edit''页面
``EDIT``:inxx
本章中你已经使用了 ''edit'' 页面。这里我们想指出''edit''页面的一些更多功能。
- 如果你点击任意文件名，你可以看到语法高亮显示的文件内容。
- 如果你点击edit（编辑），你可以通过web界面编辑文件。
- 如果你点击delete（删除），你可以删除文件（永久性的）。
- 如果你点击test（测试），web2py会运行测试。测试是开发人员使用Pythondoctests 编写的，每个函数应该有自己的测试。
- 你可以添加语言文件，扫描应用来发现所有字符串，并通过web界面编辑字符串翻译。
- 如果静态文件组织在文件夹和子文件夹中，可以通过点击文件夹名称切换文件夹层次结构。

下图显示welcome应用测试页面的输出。

[[image @///image/en4400.png center 480px]]

下图显示welcome应用的语言选项卡。

[[image @///image/en4500.png center 480px]]

下图显示如何编辑语言文件，本例中是welcome 应用的"it" (意大利语)语言。

[[image @///image/en4600.png center 480px]]

##### ''shell''

如果你在''edit''页面中点击控制器选项卡下的"shell"链接，web2py会打开一个基于web的Python shell 并且会执行当前应用的模型。这使得你能交互的与你
的应用对话。

[[image @///image/en4700.png center 480px]]

##### ''crontab''

编辑页面中同样是在控制器选项卡下有一个"crontab"链接。通过点击该链接你将能够编辑web2py 的crontab 文件。它遵循的语法与unix crontab 相同，但不
依赖于unix。实际上，它只需要web2py，并且它能在Windows上运行。它允许你注册需要在预定时间后台执行的动作。

如需更多相关信息，请参见下一章。

#### ''errors''
``errors``:inxx
在编程web2py时，你难免会犯错误并引入漏洞。web2py提供两方面的帮助：1）它允许你为每个函数创建测试，可以在浏览器中从edit页面运行；2）当错
误表现出来时，发出一张票据给访问者并且错误被记录。

如下，在images应用中故意引入错误：
``
def index():
    images = db().select(db.image.ALL,orderby=db.image.title)
    1/0
    return dict(images=images)
``:code

当你访问index动作时，你得到如下票据：

[[image @///image/en4800.png center 480px]]

只有管理员才能访问票据：

[[image @///image/en4900.png center 480px]]

票据显示回溯，引起问题的文件的内容，以及系统的完整状态（变量，请求，会话等）。如果错误出现在视图中，web2py显示从HTML转换成Python代码的视图。这可以很容易地确定文件的逻辑结构。

默认情况下，票据存储在文件系统中并按照回溯分组。管理界面提供聚合视图（回溯的类型和发生的次数）和一个详细视图（所有票据按照票据id列出）。
管理员可以切换两个视图。

注意 **admin** 处处显示语法高亮的代码（例如，在错误报告中，web2py关键字显
示为黄色）。如果你点击web2py关键字，你会被重定向到有关该关键字的文档
页面。

如果你修复index动作中除以零的错误并在index视图中引入一个：
``
{{extend 'layout.html'}}

<h1>Current Images</h1>
<ul>
{{for image in images:}}
{{1/0}}
{{=LI(A(image.title, _href=URL("show", args=image.id)))}}
{{pass}}
</ul>
``:code

你会得到如下票据：

[[image @///image/en5000.png center 480px]]

注意web2py已经将视图从HTML转换成Python代码，并且票据中描述的错误指的是生成的Python代码而不是原始视图文件：

[[image @///image/en5100.png center 480px]]

最初这可能看起来令人困惑，但在实践中它使调试变得更容易，因为Python缩进突出显示嵌入视图中代码的逻辑结构。

代码显示在同一页面的底部。

所有票据都在admin中每个应用的errors页面列出：

[[image @///image/en5200.png center 480px]]

#### ''Mercurial''
``Mercurial``:inxx

如果你从源代码运行并且你安装有Mercurial版本的控制库：
``
easy_install mercurial
``:code

之后，管理界面显示一个称为"mercurial"的菜单项。它自动为应用创建一个本地Mercurial存储库。在页面中按下"commit"按钮将提交应用。Mercurial创建并
存储关于你对代码所做改动的信息到应用子文件夹中的隐藏文件夹".hg"。每个应用都有自己的".hg"文件夹和".hgignore"文件（告诉Mercurial忽略哪些文件）。

Mercurial web界面允许你浏览以前的提交以及diff文件但我们强烈建议你直接从shell或许多基于GUI的 Mercurial客户端来使用Mercurial，因为它们功
能更强大。例如它们允许你同步你的应用和远程资源存储库：

[[images @///image/en5300.png center 480px]]


你可以在如下地址阅读关于Mercurial的更多内容：
``
http://mercurial.selenic.com/
``

#### Admin向导（实验性的）

 **admin** 界面包含一个向导，它能帮助你创建新应用。
 你可以从"sites"页面访问向导，如下图所示：

[[image @///image/en5400.png center 480px]]

向导将会指导你通过一系列创建新应用牵扯到的步骤：

- 为应用选择名称
- 配置应用并选择需要的插件
- 构建需要的模型（它将为每个模型创建CRUD页面）
- 允许你使用MARKMIN语法编辑页面视图

下图显示过程中的第2步。

[[image @///image/en5500.png center 480px]]

你会看到一个下拉菜单来选择一个布局插件（从 ``web2py.com/layouts``），一
个多选下拉菜单来检查其它插件（从 ``web2py.com/plugins``），还有一个"login
config"字段在这里放置Janrain "domain:key"。

其它步骤都非常不言自明。

向导能很好地完成它的工作但它视为一种实验性功能，原因有两个：

- 使用向导创建和被手动修改过的应用，以后不能被向导修改。
- 向导界面会随时间而改变，包括支持更多的功能和更容易的可视化开发。

无论如何，向导是一个得心应手的工具用来快速制作原型，它可以用来引导带有备用布局和可选插件的新应用。

#### 配置**admin**

通常无需进行任何admin配置，但一些自定义是可能的。在你登录admin之后，你可以通过如下URL编辑admin配置文件：
``
http://127.0.0.1:8000/admin/default/edit/admin/models/0.py
``
注意**admin**可以用来编辑本身。实际上admin是一个应用与其它任何应用一样。

文件"0.py"很大程度上是自我记录，如果你正在打开也许你已经知道你寻找的是什么。还有，有一些自定义比其它的更重要：

``
GAE_APPCFG = os.path.abspath(os.path.join('/usr/local/bin/appcfg.py'))
``
这应该指向"appcfg.py"文件的位置，该文件配备Google App Engine SDK。如果你有SDK你可能要将配置参数改为正确的值。这将允许你从admin界面部署
到GAE。

``DEMO_MODE``:inxx

你还可以在演示模式下设置web2py admin：
``
DEMO_MODE = True
FILTER_APPS = ['welcome']
``
只有列出在过滤应用中的应用才能访问，并且只能在只读模式下访问。

``MULTI_USER_MODE``:inxx
``virtual laboratory``:inxx

如果你是一名教师，要公开管理界面给学生，使学生可以分享他们的项目管理界面（认为虚拟实验室），可以如下设置：
``
MULTI_USER_MODE = True
``
这样，学生将需要登录并且通过admin将只能访问自己的应用。你作为第一用户/老师，将能够访问全部应用。

注意这个机制仍然假定所有的用户都是可信的。admin下创建的所有应用运行在相同文件系统的相同凭据下。一名学生创建的应用有可能访问另一名学生
创建的应用的数据和源代码。

### 更多关于**appadmin**

``appadmin``:inxx

**appadmin** 的目的不是被公开曝光。它旨在帮助你提供一个容易的数据库访问。
它只包含两个文件：控制器"appadmin.py"和视图"appadmin.html"，它们被控制器中的所有行动使用。

**appadmin** 控制器相对较小并且可读，它提供了一个设计数据库接口的例子。

**appadmin** 显示可用的数据库和每个数据库中存在的表。你可以插入记录并为每个表单独列出所有记录。 **appadmin** 分页输出，一次100条记录。

一旦一组记录被选中，页头就会变化，允许你你更新或删除选中的记录。

要更新记录，在查询字符串字段输入一个SQL任务：
``
title = 'test'
``:code

字符串值必须括在单引号内。可以用逗号分隔的多个字段。

要删除一条记录，单击相应的复选框以确认你肯定。

**appadmin**还可以进行连接如果SQL FILTER（过滤器）包含的SQL条件涉及两个或多个表。例如，尝试：
``
db.image.id == db.comment.image_id
``:code

web2py将它传递到DAL，并且DAL理解该查询链接两个表；因此，两个表都被INNER JOIN选中。下面是输出：

[[image @///image/en5600.png center 480px]]

如果你点击id字段的数字，你会得到相应ID记录的编辑页面。

如果您店家参考字段的数字，你会得到引用记录编辑页面。

你不能更新或删除由联合查询选定的行，因为它们涉及多个表中的记录并
且这将是含糊不清的。

除了其数据库管理能力，**appadmin**还能使你要查看有关应用程序缓存``cache``（在``/yourapp/appadmin/ccache``中）内容的详细信息，以及当前``request``，``response``和``session``对象（在``/yourapp/appadmin/state``中）的内容。

------
**appadmin**用自己的菜单取代``response.menu``，它提供了到**admin**中应用的**edit**界面、**db**db（数据库管理）界面、**state**界面和**cache**界面的链接。。如果你的应用布局不会使用``response.menu``生成菜单，那么你将不会看到**appadmin**菜单。在这种情况下，你可以修改appadmin.html文件并添加``{{=MENU(response.menu)}}`` 以显示菜单。
------
