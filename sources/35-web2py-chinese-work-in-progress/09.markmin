## 访问控制 Access Control
``Auth``:inxx ``Access Control``:inxx ``RBAC``:inxx ``DAC``:inxx ``MAC``:inxx

Web2py包含强大的并且可定制的基于角色的访问控制机制（RBAC）。
下面是来自维基百科（Wikipedia）的定义：

“基于角色的访问控制（RBAC）是给授权用户限制系统访问的途径。它是
新的替代强制访问控制（MAC）和自主访问控制（DAC）的方案。RBAC有时
称为基于角色的安全。

RBAC是一种策略中性和灵活的访问控制技术足够强大来模拟DAC和
MAC。相反，如果角色图限制为树而不是部分排序集，MAC能模拟RBAC。

RBAC开发出来之前，MAC和DAC被视为仅知的访问控制模型：如果一个
模型不是MAC，它被视为DAC模型，反之亦然。1990s后期研究表明RBAC不属
于任何一类。

在一个组织中，角色为各种工作职能而创造。执行某些操作的权限派发给
特定角色。成员（或其它系统用户）指派了特定角色，通过那些角色指派得到
执行特定系统功能的权限。与基于内容的访问控制（CBAC）不同，RBAC不看
消息内容（比如连接的源）。

因为用户不被直接地分配权限，而仅通过他们的角色（或角色）获得，个
别用户权利的管理变成简单地给用户指派合适角色的问题；这简化了公共操作，
比如添加用户或改变用户部门。

RBAC不用于访问控制表（ACLs），用在传统自主访问控制系统，该系统
用组织中的意思分配权限给特定操作而不是低级别数据对象。例如，访问控制
表可以用来准许或取消对特定系统文件写访问，但它没有规定那个文件如何被
修改。


实现RBAC的web2py类叫做**Auth**。

**Auth** 需要（定义）下面的表：
- ``auth_user`` 存储用户名字、电子邮件地址、密码和状态（注册等候、接受、阻
止）
- ``auth_group`` 为用户在多对多结构中存储组或角色。默认情况，每个用户在它
自己的组中，但一个用户可以在多个组，并且每个组可以包含多个用户。组
用角色和描述定义。
- ``auth_membership``在多对对结构中链接用户和组。
- ``auth_permission`` 链接组合权限。权限用名字或可选表和记录来定义。例如，
某个组的成员有“update”权限对指定表的指定记录。
- ``auth_event`` 日志在其它表中改变，通过RBAC控制的对象的CRUD成功访问。

原理上，没有对角色名字和权限名字的限制；开发者可以创建它们固定组
织中的角色和权限。一旦它们被创建，web2py提供API检查是否用户登录了，用
户是否是所给出组的成员，或用户是否是任意一个组的用户，并得到了需要的
权限。web2py也提装饰器来限制访问基于登录、成员资格和权限的任意功能。
web2py也理解一些特定的权限，即那些具有与CRUD方法相应名字（create,
read, update, delete)创建、读取、更新、删除），无需使用装饰器而强制自动使用
它们。
本章，我们将逐个讨论RBAC不同的部分。

### 认证Authentication

为了使用RBAC，用户需要被识别。这意味着他们需要注册（或被注册）并
登录。

**Auth** 提供多种登录方法。默认的一种是由基于本地``auth_user``表识别用户。另
外，能针对第三方认证系统登录用户，能对供应商单点登录，例如Google,
PAM, LDAP, Facebook, LinkedIn, Dropbox, OpenID, OAuth,等。

要开始使用 ``Auth``，你至少需要在模型文件中有下面的代码，也由
web2py“welcome”应用提供，并假定有 ``db`` 链接对象：
``
from gluon.tools import Auth
auth = Auth(db, hmac_key=Auth.get_or_create_key())
auth.define_tables()
``:code

-------
``db.auth_user``表的``password`` 字段默认是``CRYPT`` 验证器，需要 ``hmac_key``。 ``Auth.get_or_create_key()`` i是函数，从在应用文件夹的文件
“private/auth.key”读取 ``hmac_key``。如果文件不存在，它创建一个随机的 ``hmac_key``。
如果多个apps共享同一个auth数据库，确认他们也使用同一个``hmac_key``
-------

默认情况，web2py用电子邮件登录。如果不是，你想用用户名登录，设置 ``auth.define_tables(username=True)``

如果多个app共享同一个auth数据库，你想禁止迁移：
``auth.define_tables(migrate=False)``.

要公开 **Auth**，你也需要下面的函数在控制器中（例如在“"default.py”）
``
def user(): return dict(form=auth())
``:code

-------
``auth`` 对象和``user`` 动作也已定义在基本构建应用中。
-------

web2py也包括例子视图“welcome/views/default/user.html”合适地呈现这个函数，
如下：
``
{{extend 'layout.html'}}
<h2>{{=T( request.args(0).replace('_',' ').capitalize() )}}</h2>
<div id="web2py_user_form">
  {{=form}}
  {{if request.args(0)=='login':}}
    {{if not 'register' in auth.settings.actions_disabled:}}
      <br/><a href="{{=URL(args='register')}}">register</a>
    {{pass}}
    {{if not 'request_reset_password' in auth.settings.actions_disabled:}}
      <br/>
      <a href="{{=URL(args='request_reset_password')}}">lost password</a>
    {{pass}}
  {{pass}}
</div>
``:code

注意，这个函数简单显示``form`` ，因此它能用常用定制表单语法定制。仅有的注意
是表单用``form=auth()`` 显示依赖于 ``request.args(0)``；因此，如果你用定制登录表单
替换默``auth()`` 登录表单，你需要下面视图中的``if``语句：
``
{{if request.args(0)=='login':}}...custom login form...{{pass}}
``:code

上面的控制器公开了许多动作：
``
http://.../[app]/default/user/register
http://.../[app]/default/user/login
http://.../[app]/default/user/logout
http://.../[app]/default/user/profile
http://.../[app]/default/user/change_password
http://.../[app]/default/user/verify_email
http://.../[app]/default/user/retrieve_username
http://.../[app]/default/user/request_reset_password
http://.../[app]/default/user/reset_password
http://.../[app]/default/user/impersonate
http://.../[app]/default/user/groups
http://.../[app]/default/user/not_authorized
``:code
- **register** 允许用户注册。集成CAPTCHA ，但是默认禁用。
- **login** 允许注册用户登录（如果注册确认了或不需要确认，如果批准或无
需批准，且如果它没有被锁定）。
- **logout** 做你期望做的，也作为其他方法，日志事件并用来触发一些事件。
- **profile** a允许用户编辑他们的简介，即auth_user表的内容。注意该表没有固
定的结构并能定制。
- **change_password** 允许用户以失败安全模式修改他们的密码。
- **verify_email** 如果电子邮件确认打开，那么访问者，就注册，接收邮件链
接确认他们的电子邮件信息。链接指向这个动作。
- **retrieve_username**  默认情况，**Auth** 使用电子邮件和密码登录，但它，可选，
用用户名而不是电子邮件。后面这种情况，如果用户忘记他/她的用户名， ``retrieve_username`` 方法允许用户输入电子邮件地址并通过电子邮件得到用户
名。
- **request_reset_password** 允许忘记他们密码的用户请求新密码。他们会得到确
认电子邮件指向 **reset_password**.
- **impersonate** 允许用户 "impersonate" 另外用户。这对于调试和支持目的重要。``request.args[0]`` 是被模拟的用户的id。如果登录用户 ``has_permission('impersonate', db.auth_user, user_id)``这才被允许。
- **groups** 列出当前登录用户是成员的组。
- **not_authorized** 显示错误消息，当访问者试图做点他/她不被授权的事情。
- **navbar** 是帮助对象生成任务栏有login/register/等链接。

默认情况，它们全都公开，但也可能限制访问这些动作的其中一部分。
所有上面的方法能扩展或被 **Auth**子类替代。
所有上面的方法能用在分离动作。例如：

``
def mylogin(): return dict(form=auth.login())
def myregister(): return dict(form=auth.register())
def myprofile(): return dict(form=auth.profile())
...
``

要限制访问函数，只需登录为访问者，如下面例子装饰函数：
``
@auth.requires_login()
def hello():
    return dict(message='hello %(first_name)s' % auth.user)
``:code

任何函数能被装饰，不仅仅是公开的动作。当然，这仍然是一个简单的访问控
制的例子。更复杂地例子后面会讨论。
``auth.user``:inxx ``auth.user_id``:inxx

-----
``auth.user`` 包含当前登录用户``db.auth_user`` 记录的副本或反之``None`` 。也有``auth.user_id`` ，与``auth.user.id`` 即当前登录用户的id）一样或 ``None``。
-----

#### 注册限制 Restrictions on registration

如果你想允许访问者注册但不能登录，直到注册被管理员批准。
``
auth.settings.registration_requires_approval = True
``:code

你能通过appadmin界面批准注册。在表 ``auth_user``中查找。等候的注册有 ``registration_key`` 字段设置为“pending”。当该字段设置为空，注册通过。

通过appadmin界面，你也可以阻止用户登录。在表 ``auth_user``定位用户，设置``registration_key`` 为“blocked”。“blocked”用户不允许登录。注意这会阻止访问者
登录，但它不会强制已经登录的访问者退出。如果愿意也可用“disabled”替换
“blocked”，完全系统的行动。

你也可以用下面的语句完全阻止访问“register”页面。
``
auth.settings.actions_disabled.append('register')
``:code

如果你想允许用户注册，并且注册后自动登录，但仍想发送电子邮件证实以便
他们退出后不能再登录，除非他们完成了电子邮件中的指示，你能如下实现：

``
auth.settings.registration_requires_approval = True
auth.settings.login_after_registration = True
``:code


其它 **Auth** 方法也能用同样的方法限制。

#### 集成OpenID, Facebook等
``Janrain``:inxx ``OpenID``:inxx ``Facebook``:inxx ``LinkedIn``:inxx ``Google``:inxx ``MySpace``:inxx ``Flickr``:inxx

你能用web2py基于角色的访问控制，也可用其它服务认证，比如
OpenID、Facebook、 LinkedIn、Google、 Dropbox、MySpace和Flickr等。最简单的方
法是使用Janrain Engage (以前 RPX)(Janrain.com)。
Dropbox作为特例在第14章讨论，因为它不仅允许登录，它还为登录的用户提
供存储服务。
Janrain Engage是提供中间件认证的服务。你可以用Janrain.com注册，登记域名
（你应用的名字），设置你将使用的URL，并提供你API。
现在，编辑你web2py应用的模型，在你定义 ``auth`` 对象之后，把下面几行内容放
置好：

``
from gluon.contrib.login_methods.rpx_account import RPXAccount
auth.settings.actions_disabled=['register','change_password','request_reset_password']
auth.settings.login_form = RPXAccount(request,
    api_key='...',
    domain='...',
    url = "http://localhost:8000/%s/default/user/login" % request.application)
``:code

第一行导入新登录方法，第二行禁用本地注册，第三行要求web2py用PBX登录
方法。你必须插入你自己的、Janrain.com提供的``api_key``，在注册时选择的域名和
你登录页面的外部``url``。

[[image @///image/en6900.png center 300px]]

当新用户第一次登录，web2py创建新``db.auth_user`` 关联该用户。它用``registration_id`` 字段为用户存储唯一的id。大多数认证方法也提供用户名、电子邮
件、姓和名字但这不保证哪些字段提供取决于用户选择的登录方法。如果同一个
用户用不同的认证机制登录两次（例如，一次用OpenID，另外一次用
Facebook），Janrain可能不认为他/她是同一个用户，并发给不同的 ``registration_id``。

你能定制存储在 ``db.auth_user``的数据和Janrain提供数据之间的映射。
``
auth.settings.login_form.mappings.Facebook = lambda profile:\
            dict(registration_id = profile["identifier"],
                 username = profile["preferredUsername"],
                 email = profile["email"],
                 first_name = profile["name"]["givenName"],
                 last_name = profile["name"]["familyName"])
``:code

字典的键是 ``db.auth_user``的字段，值是Janrain提供配置文件对象数据项。后者的
详细说明参见在线Janrain文档。

Janrain也保留有关你的用户登录的统计。

该登录表单完全集成web2py基于角色的访问控制，你能创建组，生成组用户成
员，分配权限和阻止用户等。

-----
Janrain的免费基本服务允许上限至2500唯一注册用户每年登录。提供更多用户
需要升级到它们的付费服务等级。
如果你选择不用Janrain而想用不同的登录方法（LDAP,PAM, Google, OpenID,
OAuth/Facebook, LinkedIn等。），你也可以。实现的API在本章后面描述。
-----

#### CAPTCHA 和 reCAPTCHA

``CAPTCHA``:inxx ``reCAPTCHA``:inxx ``PIL``:inxx
为防止你网站的垃圾邮件和机器人注册，你可能需要注册CAPTCHA。Web2py支
持即开即用的``recaptcha``:cite  。这是因为reCAPTCHA很好的设计，免费，可接
入（它能读取给访问者的词），容易安装，且不需要安装第三方库。

下面是你使用reCAPTCHA需要做的：
- 注册``recaptcha``:cite  并获得你的（PUBLIC_KEY，PRIVATE_KEY）账号
对。这是两个字符串。
- 在 ``auth`` 对象定以后，追加下面的代码到你的模型：
``
from gluon.tools import Recaptcha
auth.settings.captcha = Recaptcha(request,
    'PUBLIC_KEY', 'PRIVATE_KEY')
``:code

如果你访问‘localhost’或‘127.0.0.1’ web网站，reCAPTCHA可能不工作，因为
它仅对公众可见的web网站注册才工作。

 ``Recaptcha``构造函数用下面可选参数：
``
Recaptcha(..., use_ssl=True, error_message='invalid', label='Verify:', options='')
``:code

注意默认``use_ssl=False``。

``options`` 可以是配置字符串，例如 ``options="theme:'white', lang:'fr'"``

更多细节：[[reCAPTCHA http://www.google.com/recaptcha]]``recaptchagoogle``:cite  and [[customizing http://code.google.com/apis/recaptcha/docs/customization.html]]  .

如果你想使用reCAPTCHA，在“"gluon/tools.py”查看``Recaptcha`` 类的定义，因为
用其它CAPTCHA系统容易。

注意 ``Recaptcha`` 就是扩展了 ``DIV``的帮助对象。它生成虚拟字段验证使用 ``reCaptcha`` 服务，因此它能以任何形式使用，包括用在定义FORMs：

``
form = FORM(INPUT(...),Recaptcha(...),INPUT(_type='submit'))
``:code

通过注入你能在所有SQLFORM类型中使用它：

``
form = SQLFORM(...) or SQLFORM.factory(...)
form.element('table').insert(-1,TR('',Recaptcha(...),''))
``:code

#### 定制 ``Auth``

调用
``
auth.define_tables()
``:code

定义所有还未定义的**Auth**表。这意味着如果你想这么做，
你能定义你自己的``auth_user`` 表。

有一些方法定制auth。最简单的方法是添加额外字段：

``
## after auth = Auth(db)
auth.settings.extra_fields['auth_user']= [
  Field('address'),
  Field('city'),
  Field('zip'),
  Field('phone')]
## before auth.define_tables(username=True)
``

你不但能给表“auth_user”，也能给其它表“auth_”声明额外字段。用``extra_fields``是推荐的方法，因为它不会打破任何内部机制。

另外一个方法（给专家的！）在于自己定义你的auth表。
在``auth.define_tables()`` 之前定义表，它不使用默认而是定义的。下面是如何
实现：

``
## after auth = Auth(db)
db.define_table(
    auth.settings.table_user_name,
    Field('first_name', length=128, default=''),
    Field('last_name', length=128, default=''),
    Field('email', length=128, default='', unique=True), # required
    Field('password', 'password', length=512,            # required
          readable=False, label='Password'),
    Field('address'),
    Field('city'),
    Field('zip'),
    Field('phone'),
    Field('registration_key', length=512,                # required
          writable=False, readable=False, default=''),
    Field('reset_password_key', length=512,              # required
          writable=False, readable=False, default=''),
    Field('registration_id', length=512,                 # required
          writable=False, readable=False, default=''))

## do not forget validators
custom_auth_table = db[auth.settings.table_user_name] # get the custom_auth_table
custom_auth_table.first_name.requires = \
  IS_NOT_EMPTY(error_message=auth.messages.is_empty)
custom_auth_table.last_name.requires = \
  IS_NOT_EMPTY(error_message=auth.messages.is_empty)
custom_auth_table.password.requires = [IS_STRONG(), CRYPT()]
custom_auth_table.email.requires = [
  IS_EMAIL(error_message=auth.messages.invalid_email),
  IS_NOT_IN_DB(db, custom_auth_table.email)]

auth.settings.table_user = custom_auth_table # tell auth to use custom_auth_table

## before auth.define_tables()
``:code

你能添加你想的任何字段，并改变验证器但你不能删除这个例子中标示为
“required”的字段。

使“password”, “registration_key”, “reset_password_key”
和 “registration_id” 字段 ``readable=False``和``writable=False``,因为访
问者不被允许随意更改它们。

如果你增加字段“username”，它会用来替换“email”登录。如果你要做
你还需要增加验证器：
``
auth_table.username.requires = IS_NOT_IN_DB(db, auth_table.username)
``:code

#### 重命名 ``Auth`` 表

 ``Auth`` 表的实际名字存储在：
``
auth.settings.table_user_name = 'auth_user'
auth.settings.table_group_name = 'auth_group'
auth.settings.table_membership_name = 'auth_membership'
auth.settings.table_permission_name = 'auth_permission'
auth.settings.table_event_name = 'auth_event'
``:code

在 ``auth`` 对象定义后并在Auth表定义前，表的名字可以重新指定上面变量得到
修改。例如：
``
auth = Auth(db)
auth.settings.table_user_name = 'person'
#...
auth.define_tables()
``:code

实际的表可以被引用，独立地用它们的实际名字：
``
auth.settings.table_user
auth.settings.table_group
auth.settings.table_membership
auth.settings.table_permission
auth.settings.table_event
``:code

#### 其它登录方法和登录表单
``LDAP``:inxx ``PAM``:inxx

Auth提供多登录方法，创建新登录方法的钩子。每种支持的方法对应文件夹中
的文件。
``
gluon/contrib/login_methods/
``:code

指每种登录方法在文件中的记述，下面是一些例子。

首先，我们需要区别两种登录方法：
- 用web2py 登录表单的登录方法（虽然凭证在web2py 外确认）。例如
LDAP。
- 需要外部单点登录表单的登录方法（例子是Google and Facebook）。

后一种情况，web2py从不得到登录凭证，仅是服务提供商发布的登录令牌。令
牌存储在``db.auth_user.registration_id``。

让我们考虑第一种情况的例子：

##### Basic

你有认证服务，例如在url

``
https://basic.example.com
``:code

接受基本访问控制。那意味服务器接受带有表单头的HTTP请求：

``
GET /index.html HTTP/1.0
Host: basic.example.com
Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==
``:code

后面的字符串是用户名：密码字符串base64的编码。如果用户授权了，服务响应
200OK，否则400, 401, 402, 403 或404响应。

你想用标准 ``Auth`` 登录表单输入用户名和密码，并对这样的服务确认凭据。所有
你需要做的就是添加下面的代码到你的应用：
``
from gluon.contrib.login_methods.basic_auth import basic_auth
auth.settings.login_methods.append(
    basic_auth('https://basic.example.com'))
``:code

注意 ``auth.settings.login_methods`` 是认证方法的列表，依次运行。默认它设置为：

``
auth.settings.login_methods = [auth]
``:code

当另外的方法追加了，例如``basic_auth``, **Auth** f首先首先尝试基于``auth_user``内容登
录访问者，当这失败，它尝试列表中的下一个方法。如果方法成功登录访问者，
且如果 ``auth.settings.login_methods[0]==auth``, ``Auth`` 采取下面的动作：
- 如果用户不存在于``auth_user``，新用户被创建并且用户名/电子邮件地址和密
码被存储。
- 如果用户不存在于``auth_user``， 但新接受的密码与存储的老的密码不匹配老
密码用新的替换（注意密码总存储散列的除非特别说明）。

如果你不希望存储新密码到``auth_user``，那么改变登录方法的顺序就足够了，或从列表删除 ``auth`` 。例如：
``
from gluon.contrib.login_methods.basic_auth import basic_auth
auth.settings.login_methods = \
    [basic_auth('https://basic.example.com')]
``:code

同样适用于其它的登录方法描述于下。

##### SMTP 和 Gmail
``SMTP``:inxx ``Gmail``:inxx

你可以用远程SMTP服务器确认登录凭据，比如Gmail；即如果他们提供的电子
邮件和密码是访问Gmail SMTP服务器word they provide are valid credentials to access the Gmail SMTP server (``smtp.gmail.com:587``)的有效凭据，你
接受用户登录。所有需要的代码如下
``
from gluon.contrib.login_methods.email_auth import email_auth
auth.settings.login_methods.append(
    email_auth("smtp.gmail.com:587", "@gmail.com"))
``:code

``email_auth`` 第一个参数是SMTP服务器的地址：端口。第二个参数是电子邮件域
名。

这对任何需要TLS认证的SMTP服务器都有用。``TLS``:inxx

##### PAM
``PAM``:inxx

用可插拔认证模块（PAM）的认证与前面的情况相同。它允许webpy用操作系统
账户认证用户：
``
from gluon.contrib.login_methods.pam_auth import pam_auth
auth.settings.login_methods.append(pam_auth())
``:code

##### LDAP
``LDAP``:inxx

用LDAP认证与前面的情况非常象。

要使用LDAP登录MS活动目录：``Active Directory``:inxx
``
from gluon.contrib.login_methods.ldap_auth import ldap_auth
auth.settings.login_methods.append(ldap_auth(mode='ad',
   server='my.domain.controller',
   base_dn='ou=Users,dc=domain,dc=com'))
``:code

要使用LDAP登录Lotus Notes 和 Domino：``Lotus Notes``:inxx ``Domino``:inxx
``
auth.settings.login_methods.append(ldap_auth(mode='domino',
   server='my.domino.server'))
``:code

要使用LDAP登录OpenLDAP（用 UID）：``OpenLDAP``:inxx
``
auth.settings.login_methods.append(ldap_auth(server='my.ldap.server',
   base_dn='ou=Users,dc=domain,dc=com'))
``:code

要使用LDAP登录OpenLDAP（用CN）：
``
auth.settings.login_methods.append(ldap_auth(mode='cn',
   server='my.ldap.server', base_dn='ou=Users,dc=domain,dc=com'))
``:code

##### Google App Engine
``GAE login``:inxx

当运行在Google App Engine用Google认证要求跳过web2py登录表单，重定向到
Google页面，成功就返回。因为行为与前面的例子不同，所以API有点不同。

``
from gluon.contrib.login_methods.gae_google_login import GaeGoogleAccount
auth.settings.login_form = GaeGoogleAccount()
``:code

##### OpenID
``OpenID``:inxx

前面我们讨论了集成Janrain（有OpenID支持），那是最简单的方法使用
OpenID。但有时，你不想依赖第三方的服务，你想直接从消费者（你的应用）
访问OpenID供应商。

下面是例子：

``
from gluon.contrib.login_methods.openid_auth import OpenIDAuth
auth.settings.login_form = OpenIDAuth(auth)
``:code

``OpenIDAuth`` 需要python-openid模块单独地安装。
在底层，这种登录方法定义下面的表：

``
db.define_table('alt_logins',
    Field('username', length=512, default=''),
    Field('type', length =128, default='openid', readable=False),
    Field('user', self.table_user, readable=False))
``:code

给每个用户存储了openid用户名。如果你想给当前登录用户显示openid：

``
{{=auth.settings.login_form.list_user_openids()}}
``:code

##### OAuth2.0 and Facebook
``OAuth``:inxx ``Facebook``:inxx

前面我们讨论了集成Janrain（有Facebook支持），但有时，你不想依赖第三方
的服务，你想直接访问OAuth2.0供应商；例如，Facebook。下面是如何实现：

``
from gluon.contrib.login_methods.oauth20_account import OAuthAccount
auth.settings.login_form=OAuthAccount(YOUR_CLIENT_ID,YOUR_CLIENT_SECRET)
``:code

如果你想用Facebook OAuth2.0登录到指定Facebook应用访问它的API而不是你
自己的应用，情况会变得更复杂。下面是访问Facebook Graph API的例子。

首先，你必须安装[[Facebook Python SDK https://github.com/facebook/python-sdk]].

其次，你需要有下面的代码在你的模型里：

``
## import required modules
from facebook import GraphAPI
from gluon.contrib.login_methods.oauth20_account import OAuthAccount
## extend the OAUthAccount class
class FaceBookAccount(OAuthAccount):
    """OAuth impl for Facebook"""
    AUTH_URL="https://graph.facebook.com/oauth/authorize"
    TOKEN_URL="https://graph.facebook.com/oauth/access_token"
    def __init__(self, g):
        OAuthAccount.__init__(self, g,
                              YOUR_CLIENT_ID,
                              YOUR_CLIENT_SECRET,
                              self.AUTH_URL,
                              self.TOKEN_URL)
        self.graph = None
    # override function that fetches user info
    def get_user(self):
        "Returns the user using the Graph API"
        if not self.accessToken():
            return None
        if not self.graph:
            self.graph = GraphAPI((self.accessToken()))
        try:
            user = self.graph.get_object("me")
            return dict(first_name = user['first_name'],
                        last_name = user['last_name'],
                        username = user['id'])
        except GraphAPIError:
            self.session.token = None
            self.graph = None
            return None
## use the above class to build a new login form
auth.settings.login_form=FaceBookAccount()
``:code

##### LinkedIn
``LinkedIn``:inxx

前面我们讨论了集成Janrain（有LinkedIn支持），那是最简单的方法使用
OAuth。但有时，你不想依赖第三方的服务，或者你想直接访问LinkedIn以获得
比Janrain所提供更多的信息。
下面是例子：

``
from gluon.contrib.login_methods.linkedin_account import LinkedInAccount
auth.settings.login_form=LinkedInAccount(request,KEY,SECRET,RETURN_URL)
``:code

``LinkedInAccount``需要单独安装的“python-linkedin”模块。

##### X509

你可以通过传递X509证书给页面来登录，你的凭据会从证书中提取。这要求从
下面安装``M2Crypto`` ：

``
http://chandlerproject.org/bin/view/Projects/MeTooCrypto
``

一旦你安装好了M2Crypto，你可以做：

``
from gluon.contrib.login_methods.x509_auth import X509Account
auth.settings.actions_disabled=['register','change_password','request_reset_password']
auth.settings.login_form = X509Account()
``:code

现在你可以传递X509证书在web2py认证。如何实现是依赖于浏览器的，但你可
能更倾向于给web服务使用证书。这种情况，你可以用比如``cURL`` 尝试你的认证：

``
curl -d "firstName=John&lastName=Smith" -G -v --key private.key \
     --cert  server.crt https://example/app/default/user/profile
``

用Rocket即开即用（web2py内建web服务器），但如果你是用不同的web服务器，
你可能需要在web服务器侧一些额外的配置工作。特别是，你需要告诉你的web
服务器，证书在本地主机的哪里，并且它需要确认来自客户的证书。如何实现
是依赖web服务器的，因而此处省略。

##### Multiple login forms

一些登录方法修改登录表单，一些不修改。当它们做这个的时候，不能同时存
在的。但通过提供多登录表单一些存在在同一个页面。Web2py通方法实现。下面
是混合常用登录（auth）和RPX登录（janrain.com）的例子：

``
from gluon.contrib.login_methods.extended_login_form import ExtendedLoginForm
other_form = RPXAccount(request, api_key='...', domain='...', url='...')
auth.settings.login_form = ExtendedLoginForm(request,
    auth, other_form, signals=['token'])
``:code

如果信号设置了并且有请求中有匹配任何信号的参数，
它返回``other_form.login_form`` 调用。
``other_form`` 能处理一些特定情况，例如， ``other_form.login_form``内的OpenID多步登录。

否则，它会用``other_form``一起呈现正常登录表单。

### ``Mail``和 ``Auth``

能用以下定义mail对象（电子邮件对象）：

``
from gluon.tools import Mail
mail = Mail()
mail.settings.server = 'smtp.example.com:25'
mail.settings.sender = 'you@example.com'
mail.settings.login = 'username:password'

``
或简单地使用``auth``提供的邮件对象：

``
mail = auth.settings.mailer
mail.settings.server = 'smtp.example.com:25'
mail.settings.sender = 'you@example.com'
mail.settings.login = 'username:password'
``

你需要用合适的参数为你的SMTP服务器替换mail.settings。如果SMTP服务器不
需要认证，设置 ``mail.settings.login = None`` 。

你可以在第8章读到更多有关电子邮件API和电子邮件配置的内容。这里我们把
讨论限定在``Mail`` 和``Auth``间的交互。

``Auth``中，默认情况，电子邮件确认是禁止的。要启用电子邮件，在模型中``Auth``
定义的地方追加虾米那几行：

``
auth.settings.registration_requires_verification = False
auth.settings.registration_requires_approval = False
auth.settings.reset_password_requires_verification = True
auth.messages.verify_email = 'Click on the link http://' + \
    request.env.http_host + \
    URL(r=request,c='default',f='user',args=['verify_email']) + \
    '/%(key)s to verify your email'
auth.messages.reset_password = 'Click on the link http://' + \
    request.env.http_host + \
    URL(r=request,c='default',f='user',args=['reset_password']) + \
    '/%(key)s to reset your password'
``:code

你需要替换
``
'Click on the link ...'
``:code

``auth.messages.verify_email`` 字符串用动作``verify_email``的合适完整的URL。这是必须的，因为web2py可能安装在代理后，它不能绝对肯定地确定它自己的公众的URL。

### 授权Authorization

一旦新用户注册了，新的组会被创建包含该用户。该新用户的角色传统上是
“user_[id]”，[id]是新创建用户id的id。能用下面的语句禁用创建组：
``
auth.settings.create_user_groups = False
``:code

但是我们建议不要这样做。

在组内用户有成员资格。每个组用名字/角色标识。组有权限。用户所具有的权限
是因为他们隶属组。

你能创建组，通过**appadmin**
授予成员资格和权限或用下面的方法编程授予：
``
auth.add_group('role', 'description')
``:code

返回新创建组的id。

``
auth.del_group(group_id)
``:code

 用``group_id``删除组。

``
auth.del_group(auth.id_group('user_7'))
``:code

用角色“user_7”删除组，即组唯一关联到用户编号7。

``
auth.user_group(user_id)
``:code

回唯一关联到由``user_id``标识的用户组的id。

``
auth.add_membership(group_id, user_id)
``:code

给``user_id`` 组 ``group_id``的成员资格。如果``user_id`` 不指定，那么web2py假定当前登录的用户。

``
auth.del_membership(group_id, user_id)
``:code

剥夺``user_id`` 组``group_id``的成员资格。如果``user_id`` 不指定，那么web2py假定当前登录的用户。

``
auth.has_membership(group_id, user_id, role)
``:code

检查 ``user_id`` 是否具有组 ``group_id`` 的成员资格或组是否有指定的角色。仅``group_id`` 或 ``role`` 应该传递给函数，不是两个。如果 ``user_id`` 没有指定，那么web2py假定当前
登录的用户。

``
auth.add_permission(group_id, 'name', 'object', record_id)
``:code

给对象“object”（也是用户定义）中“name”（用户定义的）组 ``group_id``成员的
权限。如果“object”是表名，则权限指整个表，通过设定 ``record_id`` 为0值；或权
限指特定记录，通过设定``record_id``比0大的值。当就表给权限，通常用集合
（’create’, ’read’, ’update’, ’delete’, ’select’）做权限名，因为这些权限能被
CRUD理解并执行。

如果``group_id``是0，web2py使用唯一与当前登录用户相关的组。

你也可以用 ``auth.id_group(role="...")`` 给出角色名字得到组的id。``id_group``:inxx

``
auth.del_permission(group_id, 'name', 'object', record_id)
``:code

剥夺权限。

``
auth.has_permission('name', 'object', record_id, user_id)
``:code

检查用``user_id`` 标识的用户是否有所请求权限的组的成员资格。

``
rows = db(auth.accessible_query('read', db.mytable, user_id))\
    .select(db.mytable.ALL)
``:code

返回表“mytable” 的用户 ``user_id``有“read”权限的所有行。如果``user_id``没有指定，
则web2py假定当前登录用户。
``accessible_query(...)`` 能与其它查询组合来构成更复
杂的。
``accessible_query(...)`` 是唯一要求JOIN的 **Auth** 方法，因此它不适用于Google
App Engine。

假设下面的定义：
``
>>> from gluon.tools import Auth
>>> auth = Auth(db)
>>> auth.define_tables()
>>> secrets = db.define_table('document', Field('body'))
>>> james_bond = db.auth_user.insert(first_name='James',
                                     last_name='Bond')
``:code

有例子：
``
>>> doc_id = db.document.insert(body = 'top secret')
>>> agents = auth.add_group(role = 'Secret Agent')
>>> auth.add_membership(agents, james_bond)
>>> auth.add_permission(agents, 'read', secrets)
>>> print auth.has_permission('read', secrets, doc_id, james_bond)
True
>>> print auth.has_permission('update', secrets, doc_id, james_bond)
False
``:code

#### 装饰器Decorators

最常见检查权限的途径不是显式调用上面的方法，而是装饰函数以便相关登录
用户的权限被检查了。下面是例子：
``
def function_one():
    return 'this is a public function'

@auth.requires_login()
def function_two():
    return 'this requires login'

@auth.requires_membership('agents')
def function_three():
    return 'you are a secret agent'

@auth.requires_permission('read', secrets)
def function_four():
    return 'you can read secret documents'

@auth.requires_permission('delete', 'any file')
def function_five():
    import os
    for file in os.listdir('./'):
        os.unlink(file)
    return 'all files deleted'

@auth.requires(auth.user_id==1 or request.client=='127.0.0.1', requires_login=True)
def function_six():
    return 'you can read secret documents'

@auth.requires_permission('add', 'number')
def add(a, b):
    return a + b

def function_seven():
    return add(3, 4)
``:code

``@auth.requires(condition)`` 的条件参数是可以调用的。 ``@auth.requires`` 也用可选
参数 ``requires_login`` ，默认是 ``True``。如果设置为False，在条件的值是true/false前，
它不需要登录。条件可以是布尔值或值为布尔的函数。

注意就权限访问所有函数除了第一个是受限制的，访问者可能有也可能没有。
如果用户没有登录，权限不能被检查；用户重定向到登录页面然后回到要求权
限的页面。

#### 组合要求Combining requirements

偶尔，需要组合要求。这能通过一般``requires`` 装饰器实现，用当个参数，true或
false条件。例如，给代理访问权，但是仅在星期四：
``
@auth.requires(auth.has_membership(group_id=agents) \
               and request.now.weekday()==1)
def function_seven():
    return 'Hello agent, it must be Tuesday!'
``:code

或等价于：
``
@auth.requires(auth.has_membership(role='Secret Agent') \
               and request.now.weekday()==1)
def function_seven():
    return 'Hello agent, it must be Tuesday!'
``:code

#### 授权和CRUD Authorization and CRUD

使用装饰器和/或显式检查提供实现访问控制的方法。
另外一种实现访问控制方法总是使用CRUD（与``SQLFORM``相反）访问数据库，
强制数据库表和记录访问控制。用下面的语句，通过链 ``Auth`` 和CRUD实现：
``
crud.settings.auth = auth
``:code

这能防止访问者使用任何CRUD函数除非访问者登录而且有权限。例如，允许访
问者粘贴评论，但仅能更新他们自己的评论（假设crud、auth和db.comment已定
义）：
``
def give_create_permission(form):
    group_id = auth.id_group('user_%s' % auth.user.id)
    auth.add_permission(group_id, 'read', db.comment)
    auth.add_permission(group_id, 'create', db.comment)
    auth.add_permission(group_id, 'select', db.comment)

def give_update_permission(form):
    comment_id = form.vars.id
    group_id = auth.id_group('user_%s' % auth.user.id)
    auth.add_permission(group_id, 'update', db.comment, comment_id)
    auth.add_permission(group_id, 'delete', db.comment, comment_id)

auth.settings.register_onaccept = give_create_permission
crud.settings.auth = auth

def post_comment():
   form = crud.create(db.comment, onaccept=give_update_permission)
   comments = db(db.comment).select()
   return dict(form=form, comments=comments)

def update_comment():
   form = crud.update(db.comment, request.args(0))
   return dict(form=form)
``:code

你也可以查询指定字段（那些你没有‘read’权限的）：
``
def post_comment():
   form = crud.create(db.comment, onaccept=give_update_permission)
   query = auth.accessible_query('read', db.comment, auth.user.id)
   comments = db(query).select(db.comment.ALL)
   return dict(form=form, comments=comments)
``:code

权限命名用下面的实现：

``
crud.settings.auth = auth
``:code

是 "read", "create", "update", "delete", "select", "impersonate"。

#### 授权和下载 Authorization and downloads

使用装饰器及``crud.settings.auth`` 不授权文件通过通常的下载函数下载
``
def download(): return response.download(request, db)
``:code

如果想要这么做，必须显式声明“upload”字段包含文件就下载需要访问控制。
例如：
``
db.define_table('dog',
   Field('small_image', 'upload'),
   Field('large_image', 'upload'))

db.dog.large_image.authorization = lambda record: \
   auth.is_logged_in() and \
   auth.has_permission('read', db.dog, record.id, auth.user.id)
``:code

上传文件属性 ``authorization``可以是None（默认）或是函数，决定用户是否登录并
有当前记录的‘read’权限。这个例子，没有限制下载“small_image”字段链接的
图像，但我们需要对“large_image”字段链接的图像访问控制。


#### 访问控制和基本认证

偶尔，有需要公开动作，有装饰器要求访问控制做服务；即从程序或脚本调用
它们，能使用认证检查授权。

**Auth** 允许通过Basic认证登录：
``
auth.settings.allow_basic_login = True
``:code

如此设置，如下动作：
``
@auth.requires_login()
def give_me_time():
    import time
    return time.ctime()
``:code

能被调用，例如，从shell命令：
``
wget --user=[username] --password=[password]
    http://.../[app]/[controller]/give_me_time
``:code

It is also possible to log in by calling ``auth.basic()`` rather than using an ``@auth`` decorator:
``
def give_me_time():
    import time
    auth.basic()
    if auth.user:
        return time.ctime()
    else:
        return 'Not authorized'
``:code

Basic登录经常是给服务的唯一选择（下一章描述），默认禁用。

#### 手动认证 Manual Authentication

有时候，你想实现你自己的逻辑，采用“manual”用户登录。这能通过调用函数
实现：

``
user = auth.login_bare(username,password)
``:code

如果用户存在并且密码有效，``login_bare`` 返回用户，否则它返回None。如果 “auth_user”表没有“username”字段，``username``是电子邮件。

#### 设置和消息 Settings and messages

这是所有能为 **Auth**定制的参数列表

下面语句指向``gluon.tools.Mail``对象允许 ``auth`` 发送电子邮件：

``
auth.settings.mailer = None
``:code

下面必须是定义``user`` 动作的控制器名字：

``
auth.settings.controller = 'default'
``:code

下面是非常重要的设置：

``
auth.settings.hmac_key = None
``:code

它必须设置为类似“sha512:a-pass-phrase”的东西，给``auth_user`` table的“password”字段，传递到CRYPT验证器。它是算法并通过字符串散列密码。

默认情况，auth要求最小密码长度4.也可以改变：
``
auth.settings.password_min_length = 4
``:code

要禁用动作，追加它的名字如下所示列表：
``
auth.settings.actions_disabled = []
``:code

例如：

``
auth.settings.actions_disabled.append('register')
``:code

将禁用注册。
如果你想接收电子邮件确认注册，设置为``True``:

``
auth.settings.registration_requires_verification = False
``:code

注册后要自动登录用户，即使他们没有完成电子邮件确认程序，设置下面为``True``:

``
auth.settings.login_after_registration = False
``:code

如果新注册者在能登录前必须等待通过，设置下面为 ``True``:

``
auth.settings.registration_requires_approval = False
``:code

批准由设置 ``registration_key==''``，通过appadmin或编程实现。
如果你不想每个新用户生成新组，设置下面为``False``:

``
auth.settings.create_user_groups = True
``:code

下面的设置决定替代登录方法和登录表单，如前面讨论的：

``
auth.settings.login_methods = [auth]
auth.settings.login_form = auth
``:code

你想允许basic登录吗？

``
auth.settings.allows_basic_login = False
``:code


下面是``login``动作的URL：

``
auth.settings.login_url = URL('user', args='login')
``:code

如果用户试图访问访问注册页面，但他已经登录，他能被重定向到这个URL：

``
auth.settings.logged_url = URL('user', args='profile')
``:code

这必须指向下载动作的URL，在简介包含图像的情况：

``
auth.settings.download_url = URL('download')
``:code

这些必须指向你想重定向你的用户到的URL，在各种可能 ``auth``动作之后（在没
有参考的情况下）：

``
auth.settings.login_next = URL('index')
auth.settings.logout_next = URL('index')
auth.settings.profile_next = URL('index')
auth.settings.register_next = URL('user', args='login')
auth.settings.retrieve_username_next = URL('index')
auth.settings.retrieve_password_next = URL('index')
auth.settings.change_password_next = URL('index')
auth.settings.request_reset_password_next = URL('user', args='login')
auth.settings.reset_password_next = URL('user', args='login')
auth.settings.verify_email_next = URL('user', args='login')
``:code

如果访问者没有登录， 调用需要认证的函数， 用户重定向到 ``auth.settings.login_url`` ，默认URL ``URL('default','user/login')``。可以通过如下重定义替换这个动作：
``on_failed_authentication``:inxx

``
auth.settings.on_failed_authentication = lambda url: redirect(url)
``:code

这是为重定向调用的函数。传递到这个函数的参数``url```是为登录页面的url。

如果访问者没有权限访问给定的函数，访问者重定向到如下定义的URL
``on_failed_authorization``:inxx

``
auth.settings.on_failed_authorization = \
    URL('user',args='on_failed_authorization')
``:code

你能改变这个变量并重定向用户到其它地方。

经常， ``on_failed_authorization``是URL，但它也可以是返回URL的函数，并且它
在授权失败会被调用。

这些是回调的列表，应该在任何数据库IO前单验证每个相应动作表后执行：

``
auth.settings.login_onvalidation = []
auth.settings.register_onvalidation = []
auth.settings.profile_onvalidation = []
auth.settings.retrieve_password_onvalidation = []
auth.settings.reset_password_onvalidation = []
``:code

每个回调必须是函数，用``form`` 对象参数，它能在数据库IO执行前，修改表单
对象属性。

下面是在数据库IO执行后且在重定向前应该执行的回调列表：

``
auth.settings.login_onaccept = []
auth.settings.register_onaccept = []
auth.settings.profile_onaccept = []
auth.settings.verify_email_onaccept = []
``:code

下面是例子：

``
auth.settings.register_onaccept.append(lambda form:\
   mail.send(to='you@example.com',subject='new user',
             message="new user email is %s'%form.vars.email))
``:code

你能给任何 ``auth`` 动作启用验证码：

``
auth.settings.captcha = None
auth.settings.login_captcha = None
auth.settings.register_captcha = None
auth.settings.retrieve_username_captcha = None
auth.settings.retrieve_password_captcha = None
``:code

如果 ``.captcha`` 设置指向 ``gluon.tools.Recaptcha``，所有表单，相应选项
（象``.login_captcha``）设置为 ``None`` ，都有验证码，而那些相应选项设置为``False`` 则没有。如果，相反，``.captcha`` 设置为 ``None``，只有相应选项设置为 ``gluon.tools.Recaptcha`` 对象的表单有验证码，其它就没有。

下面是登录会话终止时间：

``
auth.settings.expiration = 3600  # seconds
``:code

你可以改变密码字段的名字（例如，在Firebird中“password”是关键字，不能
用作字段名）：

``
auth.settings.password_field = 'password'
``:code


通常登录表单试图验证电子邮件。这能通过修改设置禁用：

``
auth.settings.login_email_validate = True
``:code

你想在编辑简介页面中显示记录id吗？

``
auth.settings.showid = False
``:code

对客户表单，你可能想在表单中禁用自动错误提示：

``
auth.settings.hideerror = False
``:code

对客户表单，你也能改变风格：

``
auth.settings.formstyle = 'table3cols'
``:code

（可以是“table2cols”、“divs”和“ul”）
你能给auth生成的表单设定分隔符：

``
auth.settings.label_separator =	':'
``:code


默认情况，登录表单提供选项通过“rememberme”选项扩展登录。终止时间可以
修改或通过下面设置禁止选项：

``
auth.settings.long_expiration = 3600*24*30 # one month
auth.settings.remember_me_form = True
``:code

你也可以定制下面的消息，它们的使用和内容应当是显而易见的：
``
auth.messages.submit_button = 'Submit'
auth.messages.verify_password = 'Verify Password'
auth.messages.delete_label = 'Check to delete:'
auth.messages.function_disabled = 'Function disabled'
auth.messages.access_denied = 'Insufficient privileges'
auth.messages.registration_verifying = 'Registration needs verification'
auth.messages.registration_pending = 'Registration is pending approval'
auth.messages.login_disabled = 'Login disabled by administrator'
auth.messages.logged_in = 'Logged in'
auth.messages.email_sent = 'Email sent'
auth.messages.unable_to_send_email = 'Unable to send email'
auth.messages.email_verified = 'Email verified'
auth.messages.logged_out = 'Logged out'
auth.messages.registration_successful = 'Registration successful'
auth.messages.invalid_email = 'Invalid email'
auth.messages.unable_send_email = 'Unable to send email'
auth.messages.invalid_login = 'Invalid login'
auth.messages.invalid_user = 'Invalid user'
auth.messages.is_empty = "Cannot be empty"
auth.messages.mismatched_password = "Password fields don't match"
auth.messages.verify_email = ...
auth.messages.verify_email_subject = 'Password verify'
auth.messages.username_sent = 'Your username was emailed to you'
auth.messages.new_password_sent = 'A new password was emailed to you'
auth.messages.password_changed = 'Password changed'
auth.messages.retrieve_username = 'Your username is: %(username)s'
auth.messages.retrieve_username_subject = 'Username retrieve'
auth.messages.retrieve_password = 'Your password is: %(password)s'
auth.messages.retrieve_password_subject = 'Password retrieve'
auth.messages.reset_password = ...
auth.messages.reset_password_subject = 'Password reset'
auth.messages.invalid_reset_password = 'Invalid reset password'
auth.messages.profile_updated = 'Profile updated'
auth.messages.new_password = 'New password'
auth.messages.old_password = 'Old password'
auth.messages.group_description = \
    'Group uniquely assigned to user %(id)s'
auth.messages.register_log = 'User %(id)s Registered'
auth.messages.login_log = 'User %(id)s Logged-in'
auth.messages.logout_log = 'User %(id)s Logged-out'
auth.messages.profile_log = 'User %(id)s Profile updated'
auth.messages.verify_email_log = 'User %(id)s Verification email sent'
auth.messages.retrieve_username_log = 'User %(id)s Username retrieved'
auth.messages.retrieve_password_log = 'User %(id)s Password retrieved'
auth.messages.reset_password_log = 'User %(id)s Password reset'
auth.messages.change_password_log = 'User %(id)s Password changed'
auth.messages.add_group_log = 'Group %(group_id)s created'
auth.messages.del_group_log = 'Group %(group_id)s deleted'
auth.messages.add_membership_log = None
auth.messages.del_membership_log = None
auth.messages.has_membership_log = None
auth.messages.add_permission_log = None
auth.messages.del_permission_log = None
auth.messages.has_permission_log = None
auth.messages.label_first_name = 'First name'
auth.messages.label_last_name = 'Last name'
auth.messages.label_username = 'Username'
auth.messages.label_email = 'E-mail'
auth.messages.label_password = 'Password'
auth.messages.label_registration_key = 'Registration key'
auth.messages.label_reset_password_key = 'Reset Password key'
auth.messages.label_registration_id = 'Registration identifier'
auth.messages.label_role = 'Role'
auth.messages.label_description = 'Description'
auth.messages.label_user_id = 'User ID'
auth.messages.label_group_id = 'Group ID'
auth.messages.label_name = 'Name'
auth.messages.label_table_name = 'Table name'
auth.messages.label_record_id = 'Record ID'
auth.messages.label_time_stamp = 'Timestamp'
auth.messages.label_client_ip = 'Client IP'
auth.messages.label_origin = 'Origin'
auth.messages.label_remember_me = "Remember me (for 30 days)"
``:code
``add|del|has`` membership logs allow the use of "%(user_id)s" and "%(group_id)s".
``add|del|has`` permission logs allow the use of "%(user_id)s", "%(name)s", "%(table_name)s", and "%(record_id)s".

### 集中认证服务Central Authentication Service
``CAS``:inxx ``authentication``:inxx

Web2py 提供对第三方认证的支持和单点登录。下面我们讨论集中认证服务
（CAS），它是工业标准，客户端和服务器端都构建到web2py内。

CAS是公开的分布式认证的协议，它的工作原理如下：当访问者到达我们的
web网站，我们的应用在会话中检查用户是否已经注册（例如通过 ``session.token``对象）。如果用户没有经过认证，控制器从CAS应用重定向用户，用户可以登录、注册和管理他的凭据（姓名、电子邮件和密码）。如果用户注册，他接到电子邮件，注册没有完成，直到他响应了电子邮件。
一旦用户成功注册并登录，CAS应
用重定向用户到我们的应用并发给密钥。我们的应用使用密钥通过到后台CAS服
务器的HTTP请求得到用户的凭据。

使用这样的机制，多个应用可以通过单个CAS服务器实现单点登录。提供认证的
服务器称之为服务供应商。寻找认证访问者的应用程序叫做服务消费者。

CAS与OpenID很相似，有一个主要的不同。在OpenID情况下，访问者选择服务
供应商。在CAS情形，我们的应用做决定，是CAS更安全。

运行web2py， CAS供应商易如拷贝基本构建应用。
事实上，任何web2py应用公开了动作

``
## in provider app
def user(): return dict(form=auth())
``

是CAS2.0提供商，它的服务通过URL访问

``
http://.../provider/default/user/cas/login
http://.../provider/default/user/cas/validate
http://.../provider/default/user/cas/logout
``:code
（我们假设应用叫做“provider”）
你能通过简单委托认证给提供商，从其它任何web应用（消费者）访问这个服务：

``
## in consumer app
auth = Auth(db,cas_provider = 'http://127.0.0.1:8000/provider/default/user/cas')
``:code

当你访问登录url消费者应用，它会重定向你到提供商应用，执行认证并重定向
消费者回来。注册、退出登录、修改密码获取密码的所有处理，在供应商应用完
成。关于登录用户的条目会被创建在消费者侧，以便你添加额外的字段和本地
配置。得益于CAS2.0，供应商的所有字段可读，在消费者 ``auth_user`` 表有相应字
段会自动拷贝。 

``Auth(...,cas_provider='...')`` 与第三方供应商工作，并支持CAS1.0和2.0。版本自动
检测。默认情况，通过追加它从基（上面的``cas_provider`` ）构建供应商的URL：

``
/login
/validate
/logout
``:code

这能在消费者和供应商中修改

``
## in consumer or provider app (must match)
auth.settings.cas_actions['login']='login'
auth.settings.cas_actions['validate']='validate'
auth.settings.cas_actions['logout']='logout'
``

如果你想从不同的域名连接到web2py CAS供应商，你必须添加允许域名来启用
它们：

``
## in provider app
auth.settings.cas_domains.append('example.com')
``:code


#### U用web2py授权非web2py 应用

这是可能的但依赖于web服务器。这里我们假定两个应用运行在同一个web服务
器：具有``mod_wsgi``的 Apache。两个应用中的一个是 web2py采用通过 Auth提供
访问控制的应用。另外一个可能是CGI脚本、PHP程序或其它任意的。当一个客户
请求访问后者，我们想指导web服务器请求到前一个应用的权限。

首先，我们需要修改web2py并添加下面的控制器：

``
def check_access():
    return 'true' if auth.is_logged_in() else 'false'
``:code

如果用户登录了它返回 ``true`` ，否者返回 ``false`` 。现在我们后台启动web2py进程：

``
nohup python web2py.py -a '' -p 8002
``

端口8002是必须的，不需要启动admin，因而没有admin密码。

然后，我们需要编辑Apache配置文件（例如“/etc/apache2/sitesavailable/
default”）并指导apache，以便当非web2p程序调用时，它应该调用上
面的 ``check``动作，仅当它返回``true``，它能执行并响应请求，否则拒绝访问。
 

因为web2py和非web2py应用运行在同一个域名，如果用户登录到web2py应用，
web2py会话cookie传递给Apache，即使当另外一个应用被请求，会允许凭证确
认。
要实现这个，我们需要脚本，“web2py/scripts/access.wsgi”能实现。该脚本就在
web2py里。所有需要我们做的告诉apache调用这个脚本，应用的URL需要访问控
制，和脚本的位置：

``
<VirtualHost *:80>
   WSGIDaemonProcess web2py user=www-data group=www-data
   WSGIProcessGroup web2py
   WSGIScriptAlias / /home/www-data/web2py/wsgihandler.py

   AliasMatch ^myapp/path/needing/authentication/myfile /path/to/myfile
   <Directory /path/to/>
     WSGIAccessScript /path/to/web2py/scripts/access.wsgi
   </Directory>
</VirtualHost>
``

这里“mˆ yapp/path/needing/authentication/myfile”是正则表达式，应该匹配输入
请求“/path/to/”是web2py文件夹的绝对位置。

“access.wsgi”脚本包含下面的行：

``
URL_CHECK_ACCESS = 'http://127.0.0.1:8002/%(app)s/default/check_access'
``

它指向我们请求的web2py应用，但你能编辑它，指向特定的应用，运行在除
8002的其它端口。

你也可以修改`check_access()`` 动作，使它的逻辑更复杂。这个动作能得到URL，原始地用环境变量请求

``
request.env.request_uri
``

你能实现更复杂的规则：

``
def check_access():
    if not auth.is_logged_in():
       return 'false'
    elif not user_has_access(request.env.request_uri):
       return 'false'
    else:
       return 'true'
``:code
