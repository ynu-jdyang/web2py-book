
## 组件和插件Components and plugins
``component``:inxx
``plugin``:inxx

组件和插件是web2py相对较新的功能，在开发者间关于它们是什么和它们应该是什
么存在一些不同意见。大部分的困惑源于在其它软件项目对这些术语不同的使用，以及开发者继续完善技术要求的事实。

但是，插件支持是重要特性而且我们需要提供一些定义。这些定义不意味着是最终的，
而是与编程模式保持一致，我们将在本章讨论。


- 我们如何能构建模块应用最小化服务器负荷并最大化代码重用？
- 我们如何能发布代码为或多或少即插即用的风格？

''Components'' 解决第一个问题； ''plugins'' 解决第二个问题。

### 组件 Components
``load``:inxx
``LOAD``:inxx
``Ajax``:inxx

------
**component** 是web页面功能自治的部分。
------

组件可以由模块、控制器和视图组成，没有严格的要求，除了嵌在web页面，它必须
局部化在html标签（例如DIV、SPAN或IFRAME）范围内并且必须独立于页面其它部分执
行任务。我们尤其关注加载在页面内并且通过Ajax和组件控制器通信的页面。

组件的一个例子是“comments component”，包含在DIV并显示用户的评论以及粘贴
新评论表单。当表单提交，它通过Ajax发送到服务器，列表更新并且评论存储在服务器的数据库。DIV内容无需重载页面的其余部分就得到刷新。

web2py LOAD函数使它易于实现，不需要太多JavaScript/Ajax知识和编程。

我们的目标是能通过装配组件到页面布局开发web应用。

考虑简单web2py应用“test”用“models/db_comments.py”中自定义的模型扩展默认基
本构建应用。

``
db.define_table('comment',
   Field('body','text',label='Your comment'),
   Field('posted_on','datetime',default=request.now),
   Field('posted_by',db.auth_user,default=auth.user_id))
db.comment.posted_on.writable=db.comment.posted_on.readable=False
db.comment.posted_by.writable=db.comment.posted_by.readable=False
``:code

在“controllers/comments.py”中的动作

``
@auth.requires_login()
def post():
    return dict(form=crud.create(db.comment),
                comments=db(db.comment).select())
``:code

相应的视图“views/comments/post.html”

``
{{extend 'layout.html'}}
{{for comment in comments:}}
<div class="comment">
  on {{=comment.posted_on}} {{=comment.posted_by.first_name}}
  says <span class="comment_body">{{=comment.body}}</span>
</div>
{{pass}}
{{=form}}
``:code

你可以象以往一样访问，在：

``
http://127.0.0.1:8000/test/comments/post
``:code

[[image @///image/en7900.png center 480px]]

到目前，该动作没有什么特殊的，但通过定义新视图带扩展名“.load”，我们把它转
换为一个组件不扩展布局。

因此，我们创建“views/comments/post.load”：

``
{{#extend 'layout.html' <- notice this is commented out!}}
{{for comment in comments:}}
<div class="comment">
  on {{=comment.posted_on}} {{=comment.posted_by.first_name}}
  says <span class="comment_body">{{=comment.body}}</span>
</div>
{{pass}}
{{=form}}
``:code

我们可以访问它，在URL ：

``
http://127.0.0.1:8000/test/comments/post.load
``:code

它看起来会象下面这样：

[[image @///image/en8000.png center 480px]]

该组件我们可以嵌入到另外任意的页面，只需通过：

``
{{=LOAD('comments','post.load',ajax=True)}}
``:code

例如在“controllers/default.py”我们可以编辑

``
def index():
    return dict()
``:code

并且在相应的视图添加组件：

``
{{extend 'layout.html'}}
<p>{{='bla '*100}}</p>
{{=LOAD('comments','post.load',ajax=True)}}
``:code

访问该页面

``
http://127.0.0.1:8000/test/default/index
``:code

将显示正常内容以及评论组件：

[[image @///image/en8100.png center 480px]]

``{{=LOAD(...)}}`` 组件呈现如下：

``
<script type="text/javascript"><!--
web2py_component("/test/comment/post.load","c282718984176")
//--></script><div id="c282718984176">loading...</div>
``:code

（实际生产的代码取决于传递给LOAD函数的选项）。

``web2py_component(url,id)``函数定义在“web2py_ajax.html”，它执行所有的魔
法：它通过Ajax调用 ``url`` 并依据相应的``id``把响应嵌到DIV；它陷阱每个表单提交
到DIV并通过Ajax提交那些表单。Ajax目标总是DIV自己。

完整的LOAD帮助对象的代码如下：

``
LOAD(c=None, f='index', args=[], vars={},
     extension=None, target=None,
     ajax=False, ajax_trap=False,
     url=None,user_signature=False,
     content='loading...',**attr):
``:code

此处：
- 头两个参数``c`` 和 ``f``分别是控制器和我们想调用的函数。
- ``args``和``vars``是我们想传递给函数的参数和变量。前者是列表，后者是字典。
- ``extension`` 是可选的扩展。
注意扩展名也能象在函数``f='index.load'``部分那样传递。
- ``target``是目标DIV的 ``id`` 。如果没有指定，生成随机的目标``id`` 。
- 如果DIV没有通过``ajax`` 填充，``ajax``该设置为``True`` ，如果DIV在当前页面返回以前已被填充（如此避免Ajax调用），设置为 ``False`` 
- ``ajax_trap=True`` 意味着DIV任何表单提交必须通过Ajax捕获和提交，响应必须呈现
在DIV里。 ``ajax_trap=False`` 表明表单必须正常提交，如此重载整个页面。 ``ajax_trap``忽略，如果 ``ajax=True``，假定为``True``。 
- ``url``，如果指定，则覆盖 ``c``, ``f``, ``args``, ``vars``, 和 ``extension`` 的值，在 ``url``载入组建。它用来
象其它应用服务的组建页面那样载入（可能或也可不是用web2py创建的）。
- ``user_signature`` 载入组建。它用来
象其它应用服务的组建页面那样载入（可能或也可不是用web2py创建的）。
- ``content`` is the content to be displayed while performing the ajax call. It can be a helper as in ``content=IMG(..)``.
- 可选 ``**attr`` （属性）能被传递给contained``DIV``。

如果没有指定 ``.load``d视图，用``generic.load`` 呈现动作返回的字典没有布局。如果字典包含单个项它工作得更好。

如果你LOAD有 ``.load`` 扩展名的组件并且相应的控制器函数重定向到另外一个动作（例
如，登录表单）， ``.load`` 传播且新的url（也是重定向到的）也用``.load`` 扩展名载入。

*Please note:*
因为Ajax post不支持多部分表单，即文件上传、上传字段用LOAD组件不工作。
你可能觉得被愚弄，想它能用因为上传字段会正常工作如果POST从单个组件.load视图完成。然而，上传要用ajax兼容第三方widget，web2py手动上传存储命令。

#### 客户-服务器组件通信

当通过Ajax调用组件动作，web2py用请求传递两个HTTP报头：

``
web2py-component-location
web2py-component-element
``:code

通过变量被动作访问：

``
request.env.http_web2py_component_location
request.env.http_web2py_component_element
``:code

后者也能通过下面访问： ``request.cid``:inxx

``
request.cid
``:code

前者包含调用组件动作页面URL。
后者包含DIV的 ``id`` ，DIV包含响应。

组件动作也存储数据到两个特殊的HTTP响应报头，就响应会被整个页面解释。它们是：

``
web2py-component-flash
web2py-component-command
``:code

它们可以设置，通过：

``
response.headers['web2py-component-flash']='....'
response.headers['web2py-component-command']='...'
``:code

或（如果动作被组件调用）自动通过：

``
response.flash='...'
response.js='...'
``:code

前者包含关于响应你想flash显示的文本。后者包含关于响应你想要执行的JavaScript代
码。它不包含新行。

作为例子，让我们定义联系表单组件在文件“controllers/contact/ask.py”允许用户提问
题。组件用电子邮件发送问题给系统管理员，flash“thank you”消息，从页面移出组件：

``
def ask():
    form=SQLFORM.factory(
        Field('your_email',requires=IS_EMAIL()),
        Field('question',requires=IS_NOT_EMPTY()))
    if form.process().accepted:
        if mail.send(to='admin@example.com',
                  subject='from %s' % form.vars.your_email,
                  message = form.vars.question):
            response.flash = 'Thank you'
            response.js = "jQuery('#%s').hide()" % request.cid
        else:
            form.errors.your_email = "Unable to send the email"
    return dict(form=form)
``:code

头四行定义表单并接受它。用来发送的mail对象定义在默认的基本构建应用中。最后四
行通过从HTTP请求报头得到数据以及设置HTTP响应报头实现全部组件指定逻辑

现在你可以嵌入这个联系表单到任意页面，通过

``
{{=LOAD('contact','ask.load',ajax=True)}}
``:code

注意我们不给我们的 ``ask``组件定义 ``.load`` 视图。我们也不需要因为它返回单个对象（表单），因此“generic.load”就非常好了。注意通用视图是开发工具。在生成你要复制
“views/generic.load”到“views/contact/ask.load”。

``user_signature``:inxx ``requires_signature``:inxx
我们能阻止访问通过Ajax调用的函数，用``user_signature`` 参数数字签名URL：

``
{{=LOAD('contact','ask.load',ajax=True,user_signature=True)}}
``:code

它添加了数字签名到URL。那么数字签名在回调函数中使用装饰器验证。

``
@auth.requires_signature()
def ask(): ...
``:code


#### 捕获Ajax链接
``A``:inxx
``Ajax links``:inxx

通常链接不被捕获，点击组件内的链接，整个链接的页面载入。有时，你想链接的页面
载入组件内。这能用``A`` 帮助对象实现：

``
{{=A('linked page',_href='http://example.com',cid=request.cid)}}
``:code

如果``cid`` 指定，链接的页面通过Ajax载入。
``cid``是html元素的``id`` ，放置被载入页面的内容。
。这个例子，我们设置它为``request.cid``，即组件的``id`` 生成链接。链接的页面可能是并通常
是使用URL命令生成的内部URL。

### 插件Plugins

-------
**plugin**是应用文件的任意子集。
-------

而且我们认为是 ''any'':

- 插件不是模块，不是模型，它不是控制器不是视图，
但它可能包含模块、模型、控制器和/或视图。
- 插件不需要功能上是自治的，它可能依赖其它插件或特定用户代码。
- plugin不是plugin system，因此没有注册概念也没有隔离，
但是我们给规则尝试实现一些隔离。
- 我们讨论你应用的插件，而不是web2py的插件。

因此，为什么把它叫做plugin？因为它提供一种机制打包应用的子集并给另外应用拆
包（即plug-in）。在这个定义下，你应用中的任何文件可以视为插件。
当应用程序发布时，它的插件是打包的并一同发布。

实践中， **admin** 提供界面从你的应用分开地打包和拆包插件。你应用的文件和文件夹，
有有前缀 ``plugin_``''name'' 名字的能被一起打包到一个文件，叫做：

``web2py.plugin.``''name''``.w2p``

并一起发布。

[[image @///image/en8200.png center 480px]]

web2py处理组成插件的文件与其它任何不同的文件没有什么区别，除了 **admin** 从它们的名字理解它们意味着要一同发布，admin显示它们在分开的页面：

[[image @///image/en8300.png center 480px]]

作为实际问题，通过上面的定义，这些插件比哪些被认识的比如被 **admin**更常见。

在实践中我们仅关心两类插件：

- ''Component Plugins''。这些是包含前面章所定义的组件。组件插件可以包含一个或更多组
件。我们可以思考例子 ``plugin_comments`` ，包含上面建议的comments组件。另外一个例子是``plugin_tagging``，包含tagging组件和tag-cloud组件，共享一些被插件应以的数据库表。
- ''Layout Plugins''。这些是包含布局视图及该视图所需静态文件的插件。当插件应用时，它
给应用新面貌和感受。

根据上面定义，之前章节生成的组件，例如“controllers/contact.py”也是插件。我们能移动它们从一个应用到另一个，以及使用它们定义的组件。
但是，它们不被**admin**视为如此，因为没有把它们标识为插件的东西。因此，我们有两个问题需要解决：

- 用规则命名插件文件，以便 **admin** 能识别它们属于同样的插件。
- 如果插件有模型文件，建立规则以便它定义的对象不污染命名空间而且不相互冲突。

让我们假定插件叫做name。下面是应该遵守的规则：

**Rule 1**:
插件模型和控制器应该分别命名为

- ``models/plugin_``''name''``.py``
- ``controllers/plugin_``''name''``.py``

插件视图、模块、静态和私有文件应该分别在叫做的文件件内：

- ``views/plugin_``''name''``/``
- ``modules/plugin_``''name''``/``
- ``static/plugin_``''name''``/``
- ``private/plugin_``''name''``/``

**Rule 2**:
插件模型仅能用下列开头的名字定义对象
- ``plugin_``''name''
- ``Plugin``''Name''
- ``_``

**Rule 3**:
插件模型仅能用下列开头的名字定义会话变量
- ``session.plugin_``''name''
- ``session.Plugin``''Name''

**Rule 4**:
插件应该包含许可和文档。这些被放在：
- ``static/plugin_``''name''``/license.html``
- ``static/plugin_``''name''``/about.html``

**Rule 5**:
插件仅依赖于定义在基本构建应用“db.py”的全局对象存在，即

- 数据库连接 ``db``
- ``Auth`` 实例 ``auth``
- ``Crud`` 实例 ``crud``
- ``Service`` 实例``service``

有些插件可能更高级，有配置以防参数超过一个db实例存在。

**Rule 6**:
如果插件需要配置参数，这些该通过PluginManager设置，下面描述。
``PluginManager``:inxx

遵守上面的规则，我们能确认：
- **admin** 识别所有``plugin_``''name'' 文件和文件夹为当个实体的一部分。
- 插件不会相互干扰。

上面的规则不解决插件版本问题和依赖性。这超出了我们的范围。

#### 组件插件Component plugins
``component plugin``:inxx

组件插件是定义组件的插件。组件经常访问数据库并用它们自己的模型定义。

这里我们通过使用之前相同的代码，把前面的 ``comments`` 组件变为 ``comments_plugin`` ，遵守所有前面规则。

首先，我们创建模型叫做“models/plugin_comments.py”：

``
db.define_table('plugin_comments_comment',
   Field('body','text', label='Your comment'),
   Field('posted_on', 'datetime', default=request.now),
   Field('posted_by', db.auth_user, default=auth.user_id))
db.plugin_comments_comment.posted_on.writable=False
db.plugin_comments_comment.posted_on.readable=False
db.plugin_comments_comment.posted_by.writable=False
db.plugin_comments_comment.posted_by.readable=False

def plugin_comments():
    return LOAD('plugin_comments','post',ajax=True)
``:code
（注意最后两行定义函数，会简化插件嵌入）

其次，我们定义“controllers/plugin_comments.py”

``
@auth.requires_login()
def post():
    comment = db.plugin_comments_comment
    return dict(form=crud.create(comment),
                comments=db(comment).select())
``:code

第三步，我们创建视图叫“views/plugin_comments/post.load”：

``
{{for comment in comments:}}
<div class="comment">
  on {{=comment.posted_on}} {{=comment.posted_by.first_name}}
  says <span class="comment_body">{{=comment.body}}</span>
</div>
{{pass}}
{{=form}}
``:code

现在，为发布我们能用 **admin** 打包插件。Admin会保存该插件为：

``
web2py.plugin.comments.w2p
``:code

我们可以在任意视图使用插件，只要通过在**admin**里 **edit** 页面安装插件添加这个到我们自己的视图

``
{{=plugin_comments()}}
``:code

当然通过用带参数和配置选项的组件我们可以使插件更高级。组件越复杂，避免名字冲突就变得越难。下面描述的Plugin Manager设计来避免这个问题。

#### 插件管理对象Plugin manager

``PluginManager``是在``gluon.tools``定义的类。在我们解释它内如如何工作之前，我们解释如何使用它。

这里我们考虑之前的 ``comments_plugin`` 并且使它更好。我们想能够定制：

``
db.plugin_comments_comment.body.label
``:code

无需编辑插件代码自身。

下面是我们如何实现它：
首先，用下面方式重写插件“models/plugin_comments.py”：

``
db.define_table('plugin_comments_comment',
   Field('body','text',label=plugin_comments.comments.body_label),
   Field('posted_on', 'datetime', default=request.now),
   Field('posted_by', db.auth_user, default=auth.user_id))

def plugin_comments()
    from gluon.tools import PluginManager
    plugins = PluginManager('comments', body_label='Your comment')

    comment = db.plugin_comments_comment
    comment.label=plugins.comments.body_label
    comment.posted_on.writable=False
    comment.posted_on.readable=False
    comment.posted_by.writable=False
    comment.posted_by.readable=False
    return LOAD('plugin_comments','post.load',ajax=True)
``:code

注意所有的代码除了表的定义如何封装在单个函数内。也要注意函数如何创建``PluginManager``实例。

现在你应用中的任何模型，例如“models/db.py”，你能配置该插件如下：

``
from gluon.tools import PluginManager
plugins = PluginManager()
plugins.comments.body_label = T('Post a comment')
``:code

-----
``plugins`` 对象已经在默认基本构建应用“models/db.py”中实例化。
-----

PluginManager对象是线程级Storage对象的独个存储对象。意味着在同个应用中你能实例化你想要数量的，但（不论它们有相同的名字或没有）它们行为如同仅有单个PluginManager实例
特别是，每个插件文件生成它们自己的PluginManager对象并注册自己以及它默认的参数，用：
``
plugins = PluginManager('name', param1='value', param2='value')
``:code

你可以在其它地方覆盖这些参数（例如“models/db.py”），用下面的代码：

``
plugins = PluginManager()
plugins.name.param1 = 'other value'
``:code

你能在一个地方配置多个插件：

``
plugins = PluginManager()
plugins.name.param1 = '...'
plugins.name.param2 = '...'
plugins.name1.param3 = '...'
plugins.name2.param4 = '...'
plugins.name3.param5 = '...'
``:code

-----
当插件定义了，PluginManager必须用参数：plugin名字和可选命名的参数，默认参数。但是，当插件配置时，PluginManager构造函数必须不带参数。配置必须在插件定义之前（即，它必须是模型文件以第一个字母顺序）。
-----

#### 布局插件 Layout plugins
``layout plugin``:inxx

布局插件比组件插件简单，因为经常地它不包含代码，仅含视图和静态文件。但你仍要遵
从好的实践：
首先，创建叫做“static/plugin_layout_name/”的文件夹（name是你布局的名字），放置你
所有的静态文件在此。
其次，创建布局文件叫做“views/plugin_layout_name/layout.html”，包含你的布局链接
“static/plugin_layout_name/”图像、CSS和JavaScript files文件。
再次，修改“views/layout.html”以便它仅是读取：

``
{{extend 'plugin_layout_name/layout.html'}}
{{include}}
``:code

该设计的好处是，这个插件的用户能安装多个布局并通过编辑“views/layout.html” 选择应用哪个。而且，“views/layout.html”不被**admin** 与插件一道打包，因此不存在插件覆盖之前安装的布局中用户代码的风险。


### ``plugin_wiki``
``plugin_wiki``:inxx ``wiki``:inxx

-----
免责声明：plugin_wiki是仍正在开发的，因此我们不保证与web2py核心功能同一个级别的后向兼容性。
-----

**plugin_wiki** 是插件on steroids类固醇。
我们的意思是它定义多个应用的组件，它能改变你开发你应用的方式：

你能从以下链接下载：

``
http://web2py.com/examples/static/web2py.plugin.wiki.w2p
``:code

**plugin_wiki**背后的理念是大部分应用包括页面是半静态的。这些是不包含复杂自定义逻辑
的页面。它们包含结构化的文本（想想帮助页面）、图像、音频、视频、crud表单或标准组件
的集合（评论、标签、表和地图）等。这些页面可能是公开的，需要登录或有其它认证限制。
这些页面可能用菜单链接或只有通过向导表单到达。**plugin_wiki**提供简便的方法增加页面适应这个类别到你的规则的web2py应用。

特别是， **plugin_wiki** 提供：
``widget in plugin_wiki``:inxx

- 类似wiki的界面允许添加页面到你的应用并通过slug引用它们。这些页（我们称它们
为wiki页面）有版本并存储在数据库。
- 公开和私有页面（需要登录）。如果页面要求登录，它可能需要用户有特定组成员资
格。
- 三个级别：1、2和3. 级别1，页面只包括文本、图像、音频和视频。级别2，页面也包括
widget（小工具）（这些是之前章节定义能嵌在wiki页的组件）。级别3，页面也能
包含web2py模板代码。
- 用markin语法编辑页面选择或在HTML用WYSIWYG编辑器（编辑对象）
- 一组widget（小工具）：以组件实现。它们是自己记录并作为规则组件嵌入通常
web2py视图或，使用简化的语法，到wiki页面。
- 一组特殊页面（``meta-code``,``meta-menu``等）
能用来定制插件（例如，定义插件运行的代码，定制菜单等）

------
**welcome** 应用加上 **plugin_wiki** 可以视为开发环境，这个环境下适于构建简单web应用比如博客。
------


安装插件之后你注意到的第一件事是它增加了一个叫pages的新菜单项。
点击pages菜单项，你会被重定向到插件动作：

``
http://127.0.0.1:8000/myapp/plugin_wiki/index
``:code

[[image @///image/en8400.png center 480px]]

插件索引页列出用插件本身创建的页面并允许你通过选择slug创建新的。
尝试创建``home``页面。你将重定向到

``
http://127.0.0.1:8000/myapp/plugin_wiki/page/home
``:code

点击''create page''编辑它的内容。

[[image @///image/en8500.png center 480px]]

-----
默认情况，该plugin在级别3，意味着你能插入widget（小工具）和代码到页面。默认，它使用markin语法来描述页面内容。
-----

#### ``MARKMIN`` 语法
``MARKMIN syntax``:inxx

下面是主要的markin语法：

------
**markmin** | **html**
``# title`` | ``<h1>title</h1>``
``## subtitle`` | ``<h2>subtitle</h2>``
``### subsubtitle`` | ``<h3>subsubtitle</h3>``
``**bold**`` | ``<strong>bold</strong>``
``''italic''`` | ``<i>italic</i>``
``http://...`` | ``<a href="http://...com">http:...</a>``
``http://...png`` | ``<img src="http://...png" />``
``http://...mp3`` | ``<audio src="http://...mp3"></audio>``
``http://...mp4`` | ``<video src="http://...mp4"></video>``
``qr:http://...`` | ``<a href="http://..."><img src="qr code"/></a>``
``embed:http://...`` | ``<iframe src="http://..."></iframe>``
------

注意链接、图像、音频和视频文件是自动嵌入的。
更多MARKIN语法信息，请参考第5章。

如果页面不存在，你将要求创建一个。
编辑页面允许你添加附件到页面（即静态文件）

[[image @///image/en8600.png center 480px]]

你也能链接它们：

``
[[mylink name attachment:3.png]]
``:code

或嵌入它们，用：

``
[[myimage attachment:3.png center 200px]]
``:code

大小(``200px``) 是可选的。 ``center``不是可选但它可以用``left`` 或``right``替换。

你能用下面方式嵌入块引用文本

``
-----
这是区块引言
-----
``:code

表也一样

``
-----
0 | 0 | X
0 | X | 0
X | 0 | 0
-----
``:code

逐字文本

``
!`!!`!
verbatim text
!`!!`!
``:code

你也可以在前面加选项``:class`` 到最后``-----``或到最后 ``!`!!`!``。对于块引用文本和表，它被翻译为标签类，例如：

``
-----
test
-----:abc
``:code

呈现为：

``
<blockquote class="abc">test</blockquote>
``:code

对于逐字文本，类能用来嵌入到不同类型的内容。你能，例如，用 ``:code_``''language''指定语言高亮语法嵌入代码

``
!`!!`!
def index(): return 'hello world'
!`!!`!:code_python
``:code

你能嵌入widget：

``
!`!!`!
name: widget_name
attribute1: value1
attribute2: value2
!`!!`!:widget
``:code

从编辑页面你能点击“widget builde”从列表交互地插入widget：

[[image @///image/en8700.png center 480px]]

（widget列表参看下一节）。
你也能嵌入web2py模版语言代码：

``
!`!!`!
{{for i in range(10):}}<h1>{{=i}}</h1>{{pass}}
!`!!`!:template
``:code

#### 页面权限Page permissions

当编辑一个页面你将找到下列字段：
- **active** (默认 ``True``)。如果页面不是活动的，
它不能被访问者访问（即便是public）
- **public** (默认 ``True``)。如果页面是公开的，它能被访问者访问无需登录。
- **role** (默认 None)。如果页面有角色，
页面只能被登录用户有相应角色的组的成员访问。

#### 特殊页面Special pages
``menu in plugin_wiki``:inxx

**meta-menu** 包含菜单。如果该页面不存在，
web2py使用定义在“models/menu.py”的``response.menu``。meta-menu页面内容覆盖菜单。语法如下：

``
Item 1 Name http://link1.com
   Submenu Item 11 Name http://link11.com
   Submenu Item 12 Name http://link12.com
   Submenu Item 13 Name http://link13.com
Item 2 Name http://link1.com
   Submenu Item 21 Name http://link21.com
      Submenu Item 211 Name http://link211.com
      Submenu Item 212 Name http://link212.com
   Submenu Item 22 Name http://link22.com
   Submenu Item 23 Name http://link23.com
``:code

缩进决定了子菜单结构。每个项由菜单项文本紧随链接组成。链接可以是 ``page:``''slug''。链接``None`` 不链接到任何页面。额外的空格被忽略。

下面是另外一个例子：

``
Home             page:home
Search Engines   None
   Yahoo         http://yahoo.com
   Google        http://google.com
   Bing          http://bing.com
Help             page:help
``:code

呈现如下效果：

[[image @///image/en8800.png center 480px]]

``meta-menu``:inxx ``meta-code``:inxx ``meta-header``:inxx ``meta-sidebar``:inxx ``meta-footer``:inxx
**meta-code** 是另一个特殊页面而且它必须包含web2py代码。
这是你模型的扩展，事实上你能在这里放置模型代码。当“models/plugin_wiki.py”代码执行时，它被执行。

你能在``meta-code``里定义表。

例如，你能创建简单表“friends”放置如下代码在``meta-code``里：

``
db.define_table('friend',Field('name',requires=IS_NOT_EMPTY()))
``:code

你能通过选择把下面的代码嵌入页面创建friend管理界面：
``jqGrid``:inxx ``CRUD``:inxx

``
## List of friends
!`!!`!
name: jqgrid
table: friend
!`!!`!:widget

## New friend
!`!!`!
name: create
table: friend
!`!!`!:widget

``:code

该页面有两个标头（以#开头）：“List of friends”和“"New friend”。该页面包含两个widget（小工具）（在相应的标头下）：jqgrid widget列出friends，crud widget添加新的friend。

[[image @///image/en8900.png center 480px]]

在“welcome/views/layout.html”中，``meta-header``, ``meta-footer``, ``meta-sidebar`` 不被默认布局视图使用。如果你想使用它们，用 **admin** （或shell）编辑“layout.html”并放置下列标签在合适的位置：

``
{{=plugin_wiki.embed_page('meta-header') or ''}}
{{=plugin_wiki.embed_page('meta-sidebar') or ''}}
{{=plugin_wiki.embed_page('meta-footer') or ''}}
``:code

用这种方式，那些页面的内容会显示在布局的页头、侧边栏和页脚。

#### 配置plugin_wiki

如同任何其它“models/db.py”中的插件，你能

``
from gluon.tools import PluginManager
plugins = PluginManager()
plugins.wiki.editor = auth.user.email == mail.settings.sender
plugins.wiki.level = 3
plugins.wiki.mode = 'markmin' or 'html'
plugins.wiki.theme = 'ui-darkness'
``:code

此处
- **editor** 是True如果当前已登录用户授权到编辑plugin_wiki页面
- **level** 是权限：1 编辑规则页面，2 嵌入widget到页面，3 嵌入代码
- **mode** 决定使用“markin”编辑器还是WYSIWYG“html”编辑器。 ``WYSIWYG``:inxx
- **theme** 是要求jQuery UI Theme的名字。
默认，仅中性色彩“ui-darkness”被安装。

你能在这添加主题：

``
static/plugin_wiki/ui/%(theme)s/jquery-ui-1.8.1.custom.css
``:code

#### 当前小工具Current widgets

每个widget能嵌入到plugin_wiki页面和通常的web2py模板。
例如，嵌入YouTube视频到plugin_wiki页面，你能做

``
!`!!`!
name: youtube
code: l7AWnfFRc7g
!`!!`!:widget
``

或嵌入同样的widget到web2py视图，你能做

``
{{=plugin_wiki.widget('youtube',code='l7AWnfFRc7g')}}
``:code

无论哪种情况，输出如下：

[[image @///image/en9000.png center 480px]]

widget参数没有默认值的是需要的。
下面是所有当前的widget列表：

**read**
``
read(table,record_id=None)
``:code

读取并显示记录
- ``table`` 表的名字
- ``record_id`` 记录号

**create**
``
create(table,message='',next='',readonly_fields='',
       hidden_fields='',default_fields='')
``:code

显示记录创建表单
- ``table`` 表的名字
- ``message`` 记录创建后显示的消息
- ``next`` 要重定向到的，例如“page/index/[id]”
- ``readonly_fields`` i逗号分隔的字段列表
- ``hidden_fields`` 逗号分隔的字段列表
- ``default_fields`` 逗号分隔的``fieldname=value``列表

**update**
``
update(table,record_id='',message='',next='',
       readonly_fields='',hidden_fields='',default_fields='')
``:code

显示记录更新表单
- ``table`` 表的名字
- ``record_id`` 是要被更新的记录或``{{=request.args(-1)}}``
- ``message`` 记录创建后显示的消息
- ``next`` 要重定向到的，例如“page/index/[id]”
- ``readonly_fields`` 逗号分隔的字段列表
- ``hidden_fields`` 逗号分隔的字段列表
- ``default_fields`` 逗号分隔的``fieldname=value``列表

**select**
``
select(table,query_field='',query_value='',fields='')
``:code

列出表中所有记录
- ``table`` 表的名字
- ``query_field`` 和 ``query_value`` 如果有，
用查询``query_field == query_value``过滤记录
- ``fields`` 是要显示的逗号分隔的字段列表

**search**
``
search(table,fields='')
``:code

查询记录的widget
- ``table`` 表的名字
- ``fields`` 是要显示的逗号分隔的字段列表

**jqgrid**
``jqGrid``:inxx
``
jqgrid(table,fieldname=None,fieldvalue=None,col_widths='',
       colnames=None,_id=None,fields='',col_width=80,width=700,height=300)
``:code

嵌入jqgrid插件
- ``table`` 表的名字
- ``fieldname``, ``fieldvalue`` 是可选过滤器：``fieldname==fieldvalue``
- ``col_widths`` 是每列的宽度
- ``colnames`` 是要显示的列名字的列表
- ``_id`` 是包含jqGrid的TABLE“id”
- ``fields`` 是要显示的列的列表
- ``col_width`` 是每列的默认宽度
- ``height`` 是jqGrid的高度
- ``width`` 是jqGrid的宽度

一旦你安装了plugin_wiki，你也能在你其它视图容易地使用jqGrid。使用示例（显示用fk_id==47过滤你的表格）：
``
{{=plugin_wiki.widget('jqgrid','yourtable','fk_id',47,'70,150',
    'Id,Comments',None,'id,notes',80,300,200)}}
``:code

**latex**
``latex``:inxx
``
latex(expression)
``:code

使用Google图表API嵌入LaTeX

**pie_chart**
``pie chart``:inxx
``
pie_chart(data='1,2,3',names='a,b,c',width=300,height=150,align='center')
``:code

嵌入饼图
- ``data`` 是逗号分隔值的列表
- ``names`` 是逗号分隔标签列表（数据一个）
- ``width`` 是图像宽度
- ``height`` 是图像高度
- ``align`` 决定图像对齐

**bar_chart**
``bar chart``:inxx
``
bar_chart(data='1,2,3',names='a,b,c',width=300,height=150,align='center')
``:code

使用Google图表API嵌入条状图
- ``data`` 是逗号分隔值的列表
- ``names`` 是逗号分隔标签列表（数据一个）
- ``width`` 是图像宽度
- ``height`` 是图像高度
- ``align`` 决定图像对齐

**slideshow**
``slideshow``:inxx
``
slideshow(table, field='image', transition='fade', width=200, height=200)
``:code

嵌入幻灯片。它从表得到图片。

- ``table`` 是表名
- ``field``是表中上传字段包含图片
- ``transition`` 决定过渡类型，比如 渐变等
- ``width`` 是图像宽度
- ``height`` 是图像高度

**youtube**
``YouTube``:inxx
``
youtube(code, width=400, height=250)
``:code

嵌入YouTube视频（用代码）
- ``code`` 是视频代码
- ``width`` 是图像宽度
- ``height`` 是图像高度

**vimeo**
``Vimeo``:inxx
``
vimeo(code, width=400, height=250)
``:code

嵌入Vimeo视频（用代码）
- ``code`` 是视频代码
- ``width``是图像宽度
- ``height`` 是图像高度

**mediaplayer**
``flash mediaplayer``:inxx
``
mediaplayer(src, width=400, height=250)
``:code

嵌入媒体文件（比如Flash视频或mp3文件）
- ``src`` 是视频的scr
- ``width`` 是图像宽度
- ``height`` 是图像高度

**comments**
``comments``:inxx
``
comments(table='None', record_id=None)
``:code

嵌入评论到页面
评论可能被链接到表和/或记录

- ``table`` 是表名
- ``record_id`` 是记录的id

**tags**
``tags``:inxx
``
tags(table='None', record_id=None)
``:code

嵌入标签到页面，标签可能被链接到表和/或记录

- ``table`` 是表名
- ``record_id``是记录的id

**tag_cloud**
``tag cloud``:inxx
``
tag_cloud()
``:code

嵌入标签云

**map**
``Google map``:inxx
``
map(key='....', table='auth_user', width=400, height=200)
``:code
嵌入Google地图
它从表得到地图上的点

- ``key`` 是google地图api 的键（默认为127.0.0.1工作）
- ``table`` 是表名
- ``width`` 是地图宽度
- ``height`` 是地图高度

地图必须有列: ``latitude``, ``longitude`` 和``map_popup``。当点击一个点，``map_popup``消息会出现。

**iframe**
``iframe``:inxx
``
iframe(src, width=400, height=300)
``:code

嵌入页面 ``<iframe></iframe>``之间


**load_url**
``load_url``:inxx
``
load_url(src)
``:code

用LOAD函数载入url内容

**load_action**
``load_action``:inxx
``
load_action(action, controller='', ajax=True)
``:code

用LOAD函数载入url内容（(request.application，控制器，动作）


#### 扩展widget

plugin_wiki的widget能通过创建新模型文件“models/plugin_wiki_” name被添加，此
处name是任意的也是包含下面类似内容的文件：

``
class PluginWikiWidgets(PluginWikiWidgets):
    @staticmethod
    def my_new_widget(arg1, arg2='value', arg3='value'):
        """
        document the widget
	"""
        return "body of the widget"
``:code

第一行说明你正扩展widget列表。类内，你能定义你需要的函数。每个静态函数使新的widget，除了以下划线开始的函数不是。函数带任意数量的参数，可以有或可以没有默认值。函数的docstring必须使用markin语法归档函数自己。

当widget嵌到plugin_wiki页面，参数以字符串传递给widget。这意味着widget函数能
够给每个参数接受字符串并最终把它们转换为所需要的表示。你能决定哪种字符串表示，就确认这在docstring中记录了。

Widget可以返回web2py帮助对象的字符串。后一种情况，它们会被使用 ``.xml()``序列化。

注意新widget如何访问任何声明在全局名称空间内的变量。

例如，我们打算创建一个新widget显示“contact/ask”表单，本章开头创建的。这能
通过创建文件“models/plugin_wiki_contact”实现，该文件包含：

``
class PluginWikiWidgets(PluginWikiWidgets):
    @staticmethod
    def ask(email_label='Your email', question_label='question'):
        """
	This plugin will display a contact us form that allows
	the visitor to ask a question.
	The question will be emailed to you and the widget will
	disappear from the page.
	The arguments are

	- email_label: the label of the visitor email field
	- question_label: the label of the question field

	"""
        form=SQLFORM.factory(
           Field('your_email', requires=IS_EMAIL(), label=email_label),
           Field('question', requires=IS_NOT_EMPTY()), label=question_label)
        if form.process().accepted:
           if mail.send(to='admin@example.com',
                        subject='from %s' % form.vars.your_email,
                        message = form.vars.question):
	       command="jQuery('#%s').hide()" % div_id
               response.flash = 'Thank you'
               response.js = "jQuery('#%s').hide()" % request.cid
        else:
            form.errors.your_email="Unable to send the email"
        return form.xml()
``:code

-------
plugin_wiki widget不被视图呈现，除非 ``response.render(...)`` 函数被该widget显式调用。
-------


