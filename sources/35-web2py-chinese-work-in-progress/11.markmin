
## jQuery 和 Ajax
``Ajax``:inxx

虽然web2py主要为服务器端开发，但 **welcome** 基本构建应用一道提供了基
本``jquery``:cite库, jQuery日历（日期拾取、日期时间拾取和时钟），
“superfish.js”菜单和一些附加的基于jQuery的JavaScript函数。

web2py根本不阻碍你使用其它Ajax [78]库，比如Prototype、ExtJS或YUI，
我们决定打包jQuery因为我们发现它更易于使用而且比其它相当的库更强大。
我们也发现它抓住了web2py有效而简洁的精髓。

### web2py_ajax.html

web2py基本构建应用“welcome”包含文件，叫做
``
views/web2py_ajax.html
``:code

它看起来象下面这样：

``
{{
response.files.insert(0,URL('static','js/jquery.js'))
response.files.insert(1,URL('static','css/calenadar.css'))
response.files.insert(2,URL('static','js/calendar.js'))
response.include_meta()
response.include_files()
}}
<script type="text/javascript"><!--
    // These variables are used by the web2py_ajax_init
	// function in web2py.js (which is loaded below).
    var w2p_ajax_confirm_message =
        "{{=T('Are you sure you want to delete this object?')}}";
    var w2p_ajax_date_format = "{{=T('%Y-%m-%d')}}";
    var w2p_ajax_datetime_format = "{{=T('%Y-%m-%d %H:%M:%S')}}";
//--></script>
<script src="{{=URL('static','js/web2py.js')}}"
        type="text/javascript"></script>
``:code

这个文件包含在默认“layout.html”的HEAD，它提供下列服务：
- 包含“static/jquery.js”。
- 包含“static/calendar.js” 和“static/calendar.css”，用做弹出日历。
- 包含r``response.meta`` 头。
- 包含所有 ``response.files`` （要求CSS和 JS，在代码中描述的）
- 设置表单变量并包含“static/js/web2y.js”

“web2y.js”实现下面：
- 定义``ajax``函数（基于jQuery $.ajax）。
- 使任何“error” 类DIV或任何“flash”类标签对象向下滑动。
- 防止在“integer”类INPUT区域输入无效整型。
- 防止“double”类INPUT区域输入无效浮点型。
- 用弹出日期拾取连接“date”类INPUT区域。
- 用弹出日期时间拾取连接“datetime”类INPUT区域。
- 用弹出时间拾取连接“time”类INPUT区域。
- 定义``web2py_ajax_component``, 一个非常重要的工具将在第12章描述。
- 定义 ``web2py_comet``,一个能用在HTML5 websockets的函数（不在本书描述
但可以阅读“gluon/contrib/comet_messaging.py”里的代码例子）。 ``websockets``:inxx

为后向兼容，它也包含``popup``, ``collapse``, 和``fade`` 函数。

下面是例子展示了其它效果如何在一起更好发挥更好。

考虑有下面模型的**test** 应用：
``
db = DAL("sqlite://db.db")
db.define_table('child',
     Field('name'),
     Field('weight', 'double'),
     Field('birth_date', 'date'),
     Field('time_of_birth', 'time'))

db.child.name.requires=IS_NOT_EMPTY()
db.child.weight.requires=IS_FLOAT_IN_RANGE(0,100)
db.child.birth_date.requires=IS_DATE()
db.child.time_of_birth.requires=IS_TIME()
``:code

有“default.py”这个控制器：
``
def index():
    form = SQLFORM(db.child)
    if form.process().accepted:
        response.flash = 'record inserted'
    return dict(form=form)
``:code

以及下面“default/index.html”这个视图：
``
{{extend 'layout.html}}
{{=form}}
``:code

“index”动作生成下面的表单：

[[image @///image/en7000.png center 480px]]

如果无效表单提交，服务器返回修改包含错误消息的页面。错误消息是“error”
类的DIV，因为上述的web2y.js代码，错误呈现向下华东的效果：
[[image @///image/en7100.png center 480px]]

错误消息的颜色在“layout.html”CSS代码给定。
web2y.js代码防止你在输入区域输入非法值。这在之前完成而且，不是一个替代，
服务器端验证。

当你在“date”类INPUT字段输入，web2y.js代码显示日期拾取，当你在
“datetime”类INPUT字段输入，它显示日期时间拾取。
下面是例子：

[[image @///image/en7200.png center 480px]]

当你编辑“time”类INPUT字段输入，web2y.js代码也显示下面的时间拾取。

[[image @///image/en7300.png center 480px]]

就提交，控制器动作设置相应flash到消息“record inserted”。默认布局以DIV切
id=“flash”呈现该消息。web2y.js代码负责使该DIV出现并且当你点击它使它消失。

[[image @///image/en7400.png center 480px]]

这些以及其它效果在视图中编程访问，通过控制器帮助对象。

### jQuery 效果
``effects``:inxx

这里描述的基本效果无需额外的文件，所有你需要的已经包含在
web2py_ajax.html文件。
HTML/XHTML对象能用它们的类型（例如DIV对象）、它们的类或它们的
id标识。例如：
``
<div class="one" id="a">Hello</div>
<div class="two" id="b">World</div>
``:code

它们分别属于类“one”和“two”。它们有分别等于“a”和“b”的id。
jQuery里你能用下列类似CSS等同的注释应用前面的
``
jQuery('.one')    // address object by class "one"
jQuery('#a')      // address object by id "a"
jQuery('DIV.one') // address by object of type "DIV" with class "one"
jQuery('DIV #a')  // address by object of type "DIV" with id "a"
``:code

对于后者用
``
jQuery('.two')
jQuery('#b')
jQuery('DIV.two')
jQuery('DIV #b')
``:code

或你能引用它们两个
``
jQuery('DIV')
``:code

标签对象关联到事件，比如“onclick”。jQuery允许链接这些事件到效果，例如
“slideToggle”：
``
<div class="one" id="a" onclick="jQuery('.two').slideToggle()">Hello</div>
<div class="two" id="b">World</div>
``:code

现在如果你点击“"Hello”，“World”消失。如果你再次点击，“World”重新出现。
你能使标签隐藏默认通过给它隐藏类：

``
<div class="one" id="a" onclick="jQuery('.two').slideToggle()">Hello</div>
<div class="two hidden" id="b">World</div>
``:code

你也能链接动作到事件，在标签本身外。前面的代码可重写为下面：
``
<div class="one" id="a">Hello</div>
<div class="two" id="b">World</div>
<script>
jQuery('.one').click(function(){jQuery('.two').slideToggle()});
</script>
``:code

效果返回调用对象，因此它们可以链接。

当``click`` 设置回调函数点击时调用。同样的 ``change``, ``keyup``, ``keydown``, ``mouseover``, 等。

在整个文档载入之后，通常的情况需要执行一些jQuery代码。经常通过BODY
``onload``属性实现，但是jQuery提供另外的方法无需编辑布局：
``
<div class="one" id="a">Hello</div>
<div class="two" id="b">World</div>
<script>
jQuery(document).ready(function(){
   jQuery('.one').click(function(){jQuery('.two').slideToggle()});
});
</script>
``:code

未命名函数部分只有当文档准备好，它已经被载入后才执行。
下面是一些有用事件的名字列表：

##### 表单事件
- onchange:   当元素改变时脚本运行
- onsubmit:   当表单提交时脚本运行
- onreset:    当表单重置时脚本运行
- onselect:   当元素被选中时表单运行
- onblur:     当元素失去焦点时脚本运行
- onfocus:    当元素得到焦点时脚本运行

##### 键盘事件
- onkeydown:  当键按下时脚本运行
- onkeypress: 当键按下并释放时脚本运行
- onkeyup:    当键释放时脚本运行

##### 鼠标事件
- onclick:     当鼠标单击时脚本运行
- ondblclick:  当鼠标双击时脚本运行
- onmousedown: 当按下鼠标按键时脚本运行
- onmousemove: 当鼠标指针移动时脚本运行
- onmouseout:  当鼠标指针移出元素时脚本运行
- onmouseover: 当鼠标指针移到元素时脚本运行
- onmouseup:   当鼠标按键释放时脚本运行

下面是jQuery定义的有用效果的列表：

##### Effects 效果
- jQuery(...).attr(name): 返回属性值的名字
- jQuery(...).attr(name, value): 设置属性名为值
- jQuery(...).show(): 使对象可见
- jQuery(...).hide(): 使对象隐藏
- jQuery(...).slideToggle(speed, callback): 使对象滑上或滑下
- jQuery(...).slideUp(speed, callback): 使对象滑上
- jQuery(...).slideDown(speed, callback): 使对象滑下
- jQuery(...).fadeIn(speed, callback): 使对象渐入
- jQuery(...).fadeOut(speed, callback): 使对象淡出

speed参数通常是“slow”、“fast”或忽略（默认）。callback回调函数是可
选函数，当效果完成时调用。jQuery效果可以容易地嵌入到帮助对象，例如，在
视图：

``
{{=DIV('click me!', _onclick="jQuery(this).fadeOut()")}}
``:code

jQuery是非常紧凑和简介的Ajax库；因此web2py无需jQuery之上额外的抽象层
（除了下面讨论的``ajax``函数）。当需要时，jQuery API能够以本来的表单形式访
问和准备好访问。 

咨询文档以获得更多有关这些效果和其它jQuery API的信息。

jQuery库也能用插件和用户接口Widget（User Interface Widget）扩展。这个主题
不在本书讨论；参看``jquery-ui``:cite 了解更多。

#### 表单的条件域

jQuery效果典型应用是表单基于它区域的值改变它的形式。

在web2py中容易实现因为SQLFORM帮助对象生成“CSS friendly”表单。表单包
含行的表。每行含标签、输入区域和可选第三列。项目有从表名和字段名严格继
承的id。

规定是每个INPUT字段有id ``tablename_fieldname`` ，用id``tablename_fieldname__row``包含在row（行）中。

作为例子，创建输入表单要求纳税人的名字和纳税人配偶的名字，只有当
他/她结婚。
创建有下列模型的test应用：
``
db = DAL('sqlite://db.db')
db.define_table('taxpayer',
    Field('name'),
    Field('married', 'boolean'),
    Field('spouse_name'))
``:code

下述“default.py”控制器：
``
def index():
    form = SQLFORM(db.taxpayer)
    if form.process().accepted:
        response.flash = 'record inserted'
    return dict(form=form)
``:code

下列的“default/index.html”视图：
``
{{extend 'layout.html'}}
{{=form}}
<script>
jQuery(document).ready(function(){
   jQuery('#taxpayer_spouse_name__row').hide();
   jQuery('#taxpayer_married').change(function(){
        if(jQuery('#taxpayer_married').attr('checked'))
            jQuery('#taxpayer_spouse_name__row').show();
        else jQuery('#taxpayer_spouse_name__row').hide();});
});
</script>
``:code

视图中的脚本有隐藏行配偶名字的效果：

[[image @///image/en7500.png center 480px]]

当纳税人检查“married”复选框，配偶的名字字段重新显示：

[[image @///image/en7600.png center 480px]]

此处“taxpayer_married”是复选框，关联到表“taxpayer”的字段
“married”其类型“boolean”。“taxpayer_spouse_name__row”是给表
“taxpayer”的“spouse_name”输入字段的行。

#### 删除确认
``confirmation``:inxx

另外一个有用的应用是，当勾选“delete”复选框比如出现在编辑表单的删
除复选框时，要求确认。

考虑上面的例子并添加下面的控制器动作：
``
def edit():
    row = db.taxpayer[request.args(0)]
    form = SQLFORM(db.taxpayer, row, deletable=True)
    if form.process().accepted:
        response.flash = 'record updated'
    return dict(form=form)
``:code

相应的视图“default/edit.html”
``
{{extend 'layout.html'}}
{{=form}}
``:code

``deletable``:inxx
在SQLFORM构造函数参数``deletable=True`` 指示web2py在编辑表单显示“delete”
复选框。默认它是 ``False`` 。web2py的“web2py.js”包含下列代码：

``
jQuery(document).ready(function(){
   jQuery('input.delete').attr('onclick',
     'if(this.checked) if(!confirm(
        "{{=T('Sure you want to delete this object?')}}"))
      this.checked=false;');
});
``:code

按照规定，该复选框有等于“delete”的类。上面的jQuery 代码带确认对话框
（JavaScript标准的）链接该复选框的onclick事件，如果纳税人不勾选就不
检查复选框。

[[image @///image/en7700.png center 480px]]

### ``ajax`` 函数

在web2py.js里，web2py定义叫 ``ajax`` 的函数，基于jQuery函数``$.ajax``。 但不要与它混淆。后者比前者更强大，使用方法，我们推荐你看参考文献``jquery``:cite 和``jquery-b``:cite。 但是，前一个函数对许多复杂任务足够并且更容易使用。

``ajax`` 函数是JavaScript函数，有下面的语法：
``
ajax(url, [name1, name2, ...], target)
``:code

它异步调用url（第一个参数），传递名字与列表中名字（第二个参数）
相等的输入字段值，然后存储id等于目标（第三个参数）的标签的内HTML的响
应。

下面是``default`` 控制器的例子：
``
def one():
    return dict()

def echo():
    return request.vars.name
``:code

关联的“default/one.html”视图：
``
{{extend 'layout.html'}}
<form>
   <input name="name" onkeyup="ajax('echo', ['name'], 'target')" />
</form>
<div id="target"></div>
``:code

当你在INPUT字段输入内容时，只要你释放按键（onkeyup）, ``ajax`` 函数被
调用， ``name="name"`` 字段的值传递给动作“echo”，它送回文本给视图。 ``ajax`` 函数收到响应并在“target”DIV显示回声响应。

#### Eval target

 ``ajax`` 函数的第三个参数是字符串“:eval”。这意味着被服务器返回的字符
串不会嵌在文档中而是被评估。

下面是一个``default``控制器例子：
``
def one():
    return dict()

def echo():
    return "jQuery('#target').html(%s);" % repr(request.vars.name)
``:code

关联的“default/one.html”视图：
``
{{extend 'layout.html'}}
<form>
   <input name="name" onkeyup="ajax('echo', ['name'], ':eval')" />
</form>
<div id="target"></div>
``:code

这允许更多复杂的响应来更新多目标。

#### 自动完成Auto-completion

web2py包含内建自动完成小工具（widget），在Forms章描述过。这里我
们将从零开始创建一个简单点的。

上面的 ``ajax`` 函数的另外一个应用是自动完成。这里我们希望创建输入字段
期望月名，当访问者敲入不完整的名字，通过Ajax请求执行自动完成。响应时，
自动完成的下拉框出现在输入字段下方

这能够通过下面的 ``default`` 控制器实现：
``
def month_input():
    return dict()

def month_selector():
    if not request.vars.month: return ''
    months = ['January', 'February', 'March', 'April', 'May',
              'June', 'July', 'August', 'September' ,'October',
              'November', 'December']
    month_start = request.vars.month.capitalize()
    selected = [m for m in months if m.startswith(month_start)]
    return DIV(*[DIV(k,
                     _onclick="jQuery('#month').val('%s')" % k,
                     _onmouseover="this.style.backgroundColor='yellow'",
                     _onmouseout="this.style.backgroundColor='white'"
                     ) for k in selected])
``:code

相应的“default/month_input.html”视图：
``
{{extend 'layout.html'}}
<style>
#suggestions { position: relative; }
.suggestions { background: white; border: solid 1px #55A6C8; }
.suggestions DIV { padding: 2px 4px 2px 4px; }
</style>

<form>
 <input type="text" id="month" name="month" style="width: 250px" /><br />
 <div style="position: absolute;" id="suggestions"
      class="suggestions"></div>
</form>
<script>
jQuery("#month").keyup(function(){
      ajax('month_selector', ['month'], 'suggestions')});
</script>
``:code

每次访问者在“month”输入框敲入内容，视图中的 jQuery脚本出发Ajax请
求。输入框的值用Ajax请求提交给“month_selector”动作。该动作找到以提交
文本开头（选到的）月份名的列表，创建DIV列表（每个包含推荐的月份名），
并返回带序列化DIV的字符串。视图在“suggestions”DIV显示响应
HTML。“month_selector”动作生成建议和嵌在DIV的JavaScript代码，当访问
者点击每个建议时必须执行。例如，当访问者敲入”M”回调动作返回：
``
<div>
     <div onclick="jQuery('#month').val('March')"
          onmouseout="this.style.backgroundColor='white'"
          onmouseover="this.style.backgroundColor='yellow'">March</div>
     <div onclick="jQuery('#month').val('May')"
          onmouseout="this.style.backgroundColor='white'"
          onmouseover="this.style.backgroundColor='yellow'">May</div>
</div>
``:code

下图是最后效果：

[[image @///image/en7800.png center 480px]]

如果月份存储在数据库表中，比如：
``
db.define_table('month', Field('name'))
``:code

那么只要用下面的替换 ``month_selector`` 动作：
``
def month_input():
    return dict()

def month_selector():
    if not request.vars.month:
        return ''
    pattern = request.vars.month.capitalize() + '%'
    selected = [row.name for row in db(db.month.name.like(pattern)).select()]
    return ''.join([DIV(k,
                 _onclick="jQuery('#month').val('%s')" % k,
                 _onmouseover="this.style.backgroundColor='yellow'",
                 _onmouseout="this.style.backgroundColor='white'"
                 ).xml() for k in selected])
``:code

jQuery提供可选自动完成插件具有更多的功能，但这里不讨论。

#### Ajax表单提交
``asynchronous``:inxx

这里我们考虑页面允许访问者用Ajax提交消息又不重载整个页面。使用
LOAD帮助对象，web2py提供比这里描述的更好的机制来实现，会在第12章描
述。此处，我们想展示给你如何简单用地jQuery实现。

它包含表单“myform”和“target”DIV。当表单提交时，服务器可能接受
它（并执行数据库插入）或拒绝它（因为它没有通过验证）。相应的通知用
Ajax响应返回并显示在“target”DIV。

创建 ``test`` 应用有下面的模型：
``
db = DAL('sqlite://db.db')
db.define_table('post', Field('your_message', 'text'))
db.post.your_message.requires = IS_NOT_EMPTY()
``:code

注意每个post有单个字段“your_message”要求为非空。

编辑``default.py`` 控制器并写两个动作：
``
def index():
    return dict()

def new_post():
    form = SQLFORM(db.post)
    if form.accepts(request, formname=None):
        return DIV("Message posted")
    elif form.errors:
        return TABLE(*[TR(k, v) for k, v in form.errors.items()])
``:code

第一个动作仅返回一个视图。

第二个动作是Ajax回调。它期望 ``request.vars``里的表单变量处理它们，成功则
返回``DIV("Message posted")`` 或失败返回错误消息``TABLE``。 

现在编辑“default/index.html”视图：
``
{{extend 'layout.html'}}

<div id="target"></div>

<form id="myform">
  <input name="your_message" id="your_message" />
  <input type="submit" />
</form>

<script>
jQuery('#myform').submit(function() {
  ajax('{{=URL('new_post')}}',
       ['your_message'], 'target');
  return false;
});
</script>
``:code

注意在这个例子中表单是如何用HTML手动创建，但它被SQLFORM不同于显式
表单的动作处理。SQLFORM对象从不序列化为HTML。这个情况的 ``SQLFORM.accepts`` 不用回话并设置 ``formname=None``，因为我们选择不设置表单名字而且表单键是手工HTML形式。

视图底部的脚本连接“myform”提交按钮到内联函数，该函数用web2py ``ajax`` 函数提交``id="your_message"`` 的INPUT，在 ``id="target"``的DIV内显示回答。

#### 投票和打分Voting and rating

另一个Ajax应用是页面内的投票和打分项。这里我们考虑允许访问者对粘贴的
图像投票的应用。应用由单个页面组成，根据他们的票排列显示图像。我们将允
许访问者多次投票，但是如果用户认证很容易修改这个举动，通过跟踪个人投
票数据库，并且用投票者的 ``request.env.remote_addr`` 关联它们。

下面是例子模型：
``
db = DAL('sqlite://images.db')
db.define_table('item',
    Field('image', 'upload'),
    Field('votes', 'integer', default=0))
``:code

下面是``default`` 控制器：
``
def list_items():
    items = db().select(db.item.ALL, orderby=db.item.votes)
    return dict(items=items)

def download():
    return response.download(request, db)

def vote():
    item = db.item[request.vars.id]
    new_votes = item.votes + 1
    item.update_record(votes=new_votes)
    return str(new_votes)
``:code

下载动作需要允许list_items视图下载存储在“uploads”文件夹的图像。投票
当做用来Ajax回调。

下面是“default/list_items.html”视图：
``
{{extend 'layout.html'}}

<form><input type="hidden" id="id" name="id" value="" /></form>
{{for item in items:}}
<p>
<img src="{{=URL('download', args=item.image)}}"
     width="200px" />
<br />
Votes=<span id="item{{=item.id}}">{{=item.votes}}</span>
[<span onclick="jQuery('#id').val('{{=item.id}}');
       ajax('vote', ['id'], 'item{{=item.id}}');">vote up</span>]
</p>
{{pass}}
``:code

当访问者点击“[vote up]” JavaScript代码存储item.id在隐藏
“id”INPUT字段并且通过Ajax请求提交该值给服务器。服务器给相应记录增加
投票计数并以字符串返回新的票数。这个值于是被插入到目标``item{{=item.id}}`` SPAN。

-------
Ajax回调能用在后台执行计算，但我们推荐使用 **cron** 或后台进程（第4章
讨论过），因为web服务器执行线程超时措施。如果计算耗时太长，web服务器
终止它。参考你的web服务器参数来设置超时值。
-------


